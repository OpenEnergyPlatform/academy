{"config":{"lang":["de"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Welcome to the training and tutorial section of the Open Energy Platform (OEP). We have created a series of training courses, tutorials and an FAQ which provide various material on how to interact with Open Energy Platform (OEP). </p> <p>The OEP is a web-interface for things related research data management in climate and energy systems modelling. On the OEP, researchers can publish data including FAIR metadata and thus contribute to increasing transparency and interoperability of their research. The functionalities the OEP offers help deliver the research data management lifecycle. </p> <p>To get familiar with research data management in general, we recommend to visit this interactive and comprehensive course Research Data Management by University of Oldenburg, Center for Lifelong Learning, Digitalisierte Energiesysteme, funded by Energie-Forschungszentrum Niedersachsen and supported by nfdi4energy and Zentrum f\u00fcr digitale Innovationen Niedersachsen. </p> <p>Please use the navigation bar on top of the page to navigate through the different training materials we provide. These are:</p>"},{"location":"#courses","title":"Courses","text":"<p>Courses are training materials which are typically a longer read covering a topic, for example you can learn on how to get started with the OEP. We recommend visiting courses as an entrypoint for your work with the Open Energy Platform. A course typically consists of a main text and a collection of several tutorials as well as other learning materials, so you can choose which of the materials fits best to your needs. </p>"},{"location":"#tutorials","title":"Tutorials","text":"<p>The tutorials are materials targeted at a specific topic and dove right into it. Thus, this is your destination if you are interested in a specific task at hand that you want to solve quickly and you do not require a lot of context, for example if you directly want to upload data to the OEP using the API.</p>"},{"location":"#questions","title":"Questions","text":"<p>Browse short questions. Here we shortly answer some urgent questions that you may have. The answers may include links to further reading.</p>"},{"location":"meta/","title":"Metainfo","text":"<p>Starting from October 2024, with the end of the SIROP project, and for the time being, Reiner Lemoine Institute will take care of maintainance and act as a contact point.  Questions with regard to the Open Energy Academy can be sent to: oep-contact@lists.rl-institut.de</p> <p>From 2021-2024, the Open Energy Academy is developed within the BMWK-funded SIROP project (F\u00f6rderkennzeichen 03EI1035A-03EI1035D) by Fraunhofer IEE, \u00d6ko-Institut, Otto von Guerike Universit\u00e4t Magdeburg and Reiner Lemoine Institut.  Contact: oedb@oeko.de</p> <p>The Open Energy Academy is part of the Open Energy Family.</p> <p></p>"},{"location":"questions/","title":"Questions","text":"<p>Short answers to urgent questions regarding the Open Energy Platform (OEP) and other Open Energy Family(OEF) Members.</p>"},{"location":"questions/#search-how-do-i-search-for-data-on-the-oep","title":"Search: How do I search for data on the OEP?","text":"<p>The open energy database comes with search functionality. You can use the search bar for free text and / or combine this with tags that are presented next to the search bar as a drop-down menu. This will search through data and metadata and reduce the list of topics to the list where your search term(s) were found. Click on the topic name and then see all the tables that conform to your search term(s). Alternatively, you can click and open any topic and search within this topic in the same way. Here is a short tutorial with a visual on combining free text search and tags.</p>"},{"location":"questions/#clone-how-do-i-clone-the-oep","title":"Clone: How do I clone the OEP?","text":"<p>Cloning the OEP is described in the GitHub repository oeplatform.</p>"},{"location":"questions/#data-download-how-can-i-download-data-tables-from-the-oep-without-the-need-to-use-the-api","title":"Data download: How can I download data tables from the OEP without the need to use the API","text":"<p>You can download data table as csv and as datapackage. It is really easy and described in this short tutorial.</p>"},{"location":"questions/#data-upload-how-can-i-upload-data-tables-to-the-oep-when-i-am-not-familiar-working-with-apis","title":"Data upload: How can I upload data tables to the OEP when I am not familiar working with APIs?","text":"<p>If you want to use an interface, you can upload data tables with our Upload Wizard. How to use it, is described in the corresponding Upload Wizard Tutorial.</p> <p>If you would like to learn how to upload data tables with the API, we recommend our Beginners Guide (Section 2.1). This guide includes code snippets that you can use to get familiar to this approach.</p>"},{"location":"questions/#data-upload-how-can-i-upload-data-to-the-oep-using-the-api","title":"Data upload: How can I upload data to the OEP using the API?","text":"<p>You can read the API documentation and then build your custom queries for data upload. The Beginners Guide (Section 2.1) provides some code snippets if you want to take a short-cut.</p>"},{"location":"questions/#licenses-how-do-i-find-the-license-of-a-data-table","title":"Licenses: How do I find the license of a data table?","text":"<p>Each table published on the OEP comes with metadata information attached. Metadata is displayed below the data table. If the contributor of the data table has provided the information, you will find the license under which you can re-use the data in the metadata under Licenses. Example: Global warming potentials from IPCC Assessment Reports. Look for this part of the metadata: </p>"},{"location":"questions/#metadata-review-how-can-i-contribute","title":"Metadata review: How can I contribute?","text":"<p>Currently, the data review takes place in the GitHub repository data-preprocessing. If you are interested to support with reviews, please read the manual on data review and get in touch with us, so we can add you to the reviewer team. Please let us know your GitHub handle when you get in touch.</p>"},{"location":"questions/#oeo-development-how-do-i-suggest-a-new-term-for-the-oeo","title":"OEO development: How do I suggest a new term for the OEO?","text":"<p>You can suggest new terms to the OEO by posting an issue in the GitHub repository ontology. We follow a certain discussion workflow and invite you to post issues based on this workflow. We also recommend to consult our How-to-participate guide on the OEO's Wiki.</p>"},{"location":"questions/#oep-development-how-can-i-contribute","title":"OEP development: How can I contribute?","text":"<p>The whole development process of the OEP is Open Source, thus anyone can contribute to the OEP development. To do so, please read the contributing.md carefully.</p>"},{"location":"questions/#about-the-question-section","title":"About the question section","text":"<p>Authors: Hannah F\u00f6rster (\u00d6ko-Institut). Copyright: \u00d6ko-Institut (2022). License: CC BY 4.0. Attribution: \u00d6ko-Institut (2022): Questions. Last update: 2024-10-21</p>"},{"location":"courses/01_introduction/","title":"01 - Introduction","text":"<p>Welcome to the courses section of the Open Energy Academy (OEA). On the OEA, we have created a series of training courses which provide various material on how to interact with Open Energy Platform (OEP).  The OEP is a web-interface for things related research data management in climate and energy systems modelling. On the OEP, researchers can publish data including FAIR metadata (which meet principles of findability, accessibility, interoperability, and reusability) and thus contribute to increasing transparency and interoperability of their research. The functionalities the OEP offers help deliver the research data management lifecycle. </p> <p>To get familiar with research data management in general, we recommend to visit this interactive and comprehensive course Research Data Management by University of Oldenburg, Center for Lifelong Learning, Digitalisierte Energiesysteme, funded by Energie-Forschungszentrum Niedersachsen and supported by nfdi4energy and Zentrum f\u00fcr digitale Innovationen Niedersachsen. </p> <p>Each of the training courses here on the OEA are targeted at working with the Open Energy Platform and its tools. The courses contain written content and / or links to learning materials which cater to different levels of expertise. Some materials are targeted at fluent programmers, others are targeted at persons who prefer to interact with the OEP visually. As a visual guide regarding what to expect behind links you may find in a training course, we use the following icons:</p> <p> links to written training material. The material may include some code for guidance.</p> <p> links to material focussing on code.</p> <p> is some informational text without a link to specific material.</p> <p> links to video material.</p> <p>Our training courses will grow over time. If you see the need for further topics that you see the need for documentation, please feel free to get in touch with us via our contact form.</p> <p></p> <ul> <li>Last update: 2024-10-21</li> </ul>"},{"location":"courses/02_start/","title":"02 - How to get started with the Open Energy Family and Platform","text":"<p>You will learn how to register as a user with the Open Energy Platform (OEP) and why and how to register also with GitHub.</p> <p>You can provide feedback to this course on GitHub: https://github.com/OpenEnergyPlatform/academy/issues/164</p>"},{"location":"courses/02_start/#for-whom-is-this-training-and-what-can-you-learn","title":"For whom is this training and what can you learn?","text":"<p> This module is aimed at researchers, policy makers and any interested person, who - wants to interact as a user with the OEP - wants to contribute to development of the OEP and Open Energy Family (OEF) members</p> <p> After reading the sections of this training course you will - be able to interact as a user with the OEP - understand why a GitHub account is needed to contribute to development - be able to register with GitHub</p>"},{"location":"courses/02_start/#how-do-i-get-started-with-the-oep","title":"How do I get started with the OEP?","text":"<p> How do I register with the Open Energy Platform?</p> <p>To upload your data to open energy database of the OEP, you require a user account on the OEP. Here, we show you how to register with the OEP. Click the Login button on the top right of the homepage and choose the option Create a new account. You can also go directly to Register. Then fill out the required fields and click on Submit. You will receive an activation email at the email address you provided. Please follow the instructions received in the email. After successfully activating and logging into your account, you will see your information as in the screenshot:</p> <p></p> <p>This includes your profile information and any data tables you have already contributed to the OEP. Under Settings, you will be able to view your API token, by clicking Show token:</p> <p></p> <p>The API token is necessary to make authenticated requests to the API (API = Application Programming Interface). You will use the API in case you want to connect to the OEP using programming skills.</p>"},{"location":"courses/02_start/#why-and-how-to-register-with-github","title":"Why and how to register with GitHub?","text":"<p> Why register with GitHub?</p> <p>When you interact with the OEP you also interact with the Open Energy Family (OEF). The development of the OEF and OEP is a community effort that takes place openly at GitHub in the GitHub group Open Energy Platform. There, the various family members of the OEF are developed in different repositories. We welcome you to participate in their development. To be able to do so, you will thus need to register with GitHub. You can do so at no cost.</p> <p> How to register with GitHub and become part of the Open Energy Family team?</p> <p>If you do not yet have a GitHub account, you need to register with GitHub. You will then need to become a member of the group OpenEnergyPlatform by getting invited to the group. This works as follows: Get in touch via the OpenEnergy Platform contact form. Fill in the form with your request to be added to the OpenEnergyPlatform group on GitHub. An example text is provided in the screenshot below.</p> <p></p> <p>The response is not automated and thus not immediate. Please wait until you receive an invitation to the GitHub group.</p> <p>We collected a few links to GitHub and git basics here for your first steps. </p>"},{"location":"courses/02_start/#about-this-course","title":"About this course","text":"<ul> <li>Authors: Hannah F\u00f6rster</li> <li>Copyright: \u00d6ko-Institut (2023)</li> <li>Contact: oedb@oeko.de</li> <li>License: CC BY 4.0</li> <li>Attribution: \u00d6ko-Institut (2023): How to get started with the Open Energy Family and Platform.</li> <li>Last update: 2024-10-21</li> <li>You can provide feedback to this course on GitHub: https://github.com/OpenEnergyPlatform/academy/issues/164</li> </ul>"},{"location":"courses/03_download/","title":"03 - Download - Find and download / interact with data","text":"<p>Learn to find and download data on the OEP.</p> <p>You can provide feedback to this course on GitHub: https://github.com/OpenEnergyPlatform/academy/issues/165</p>"},{"location":"courses/03_download/#for-whom-is-this-training-and-what-can-you-learn","title":"For whom is this training and what can you learn?","text":"<p> This course is aimed at researchers, policy makers and any interested person, who</p> <ul> <li>wants to find and view data on the OEP</li> <li>wants to find and download data on the OEP</li> <li>wants to find out which data belongs to which scenarios</li> </ul> <p> After reading the sections of this training course you will</p> <ul> <li>be able to find data on the OEP via the data search functionality</li> <li>be able to download data tables as .csv or as a datapackage including the metadata</li> <li>be able to use the REST-full-HTTP API in Python for selecting and downloading data from the OEP </li> <li>be able to use the oeclient with Python or the command line to select and download data from the OEP</li> <li>know that you can check the scenario bundles on the OEP to learnm ore about scenarios, the corresponding data and context</li> </ul>"},{"location":"courses/03_download/#how-can-i-find-relevant-information-on-the-oep","title":"How can I find relevant information on the OEP?","text":"<p> How to find data on the OEP? (tutorial): This tutorial teaches you how to use the free text search and tags to filter for data on the OEP. You will see that you can use both approaches individually, but also combine freetext and tags to specify your data filter further.</p>"},{"location":"courses/03_download/#how-can-i-download-interact-with-data-on-the-oep","title":"How can I download / interact with data on the OEP?","text":"<p> How to download data - CSV and data package (tutorial): Learn how easy it is to download any data table you are viewing on the OEP table with only one click and why a data package makes a difference.</p> <p> Data queries via API (tutorial): This tutorial provides an overview of how you can select, filter and download data that resides on the OEP via the REST-full-HTTP API in Python</p> <p> Data queries with the oeclient via Python  (tutorial): The oeclient is another way on how you can download data from the OEP. This turorial teaches you how to do so using a python script. </p> <p> Data queries with the oeclient via command line (tutorial): If you prefer command line over python, we have you covered: please check this turorial for learning how to use the oeclient on the command line to download data from the OEP.</p>"},{"location":"courses/03_download/#how-can-i-find-relevant-information-about-scenarios-on-the-oep","title":"How can I find relevant information about scenarios on the OEP?","text":"<p> Our scenario bundles provide dedicated information about scenarios and their context. Context for example includes the study reports that deal with the scenario(s), the projection data available on the OEP that were created using the scenario(s), the sectors and technologies depicted and so on. These bundles are based on (Resource Description Framework) RDF and the Open Energy Knowledge Graph (OEKG) and they are tied to the Open Energy Ontology (OEO) for improving comparability across scenario bundles. </p>"},{"location":"courses/03_download/#about-this-course","title":"About this course","text":"<ul> <li>Authors: Hannah F\u00f6rster, Anne Siemons</li> <li>Copyright: \u00d6ko-Institut (2022)</li> <li>Contact: oedb@oeko.de</li> <li>License: CC BY 4.0</li> <li>Attribution: \u00d6ko-Institut (2022): Download - Find and download / interact with data.</li> <li>Last update: 2024-10-21</li> <li>You can provide feedback to this course on GitHub: https://github.com/OpenEnergyPlatform/academy/issues/165</li> </ul>"},{"location":"courses/04_upload/","title":"04 - Upload and Publish - Contribute data to the OEP","text":"<p>Learn how to publish data on the OpenEnergyPlatform (OEP). You can provide feedback to this course on GitHub: https://github.com/OpenEnergyPlatform/academy/issues/166</p>","tags":["jupyter","api"]},{"location":"courses/04_upload/#for-whom-is-this-training-and-what-can-you-learn","title":"For whom is this training and what can you learn?","text":"<p> This course is aimed at researchers, no matter whether you have programming skills or not, who want to</p> <ul> <li>upload their data on the OEP</li> <li>publish their tables on the OEP</li> <li>apply an embargo period on their data</li> </ul> <p> After reading the sections of this training course you will be able to upload and publish data</p> <ul> <li>on the OEP using a visual interface - this is for those of you who do not want to program</li> <li>on the OEP with the REST-full-HTTP API in python - this is for those of you who want to akquire some programming skills</li> <li>using the oeclient or the OEP REST-API using python - this one is for those of you who can program already</li> </ul>","tags":["jupyter","api"]},{"location":"courses/04_upload/#what-does-upload-mean","title":"What does 'upload' mean?","text":"<p>Generally 'upload' refers to transimitting any data from a computer system onto another through means of a network. In this case specifically it stands for: - Move data and metadata onto the model draft section of the OEP. - Create data and metadata on the OEP.</p>","tags":["jupyter","api"]},{"location":"courses/04_upload/#how-can-i-upload-data-to-the-oep-without-programming-skills","title":"How can I upload data to the OEP without programming skills?","text":"<p> Upload tables as csv (tutorial):</p> <p>This tutorial teaches you step-by-step on how to upload data from a .csv file to the OEP using the csv upload wizard.</p>","tags":["jupyter","api"]},{"location":"courses/04_upload/#how-can-i-upload-data-to-the-oep-as-a-beginner-interested-in-programming","title":"How can I upload data to the OEP as a beginner interested in programming?","text":"<p> ,  Beginners Guide: How to upload data to the OpenEnergy Platform and initiate the review process (tutorial):</p> <p>This course (also available as PDF) describes how to upload data to the OEP using Python and the REST-API. Several steps are needed to contribute actively to the platform. Some of these you only need to do once to get started. The steps described in this document are the following: Register at the OpenEnergy Platform, Register at GitHub and get invited to the OpenEnergy Platform Group, Create data table(s) and upload data table(s), create metadata and upload metadata to GitHub, initiate data review, create scenario factsheets.</p>","tags":["jupyter","api"]},{"location":"courses/04_upload/#how-can-i-upload-data-to-the-oep-with-programming-skills","title":"How can I upload data to the OEP with programming skills?","text":"<p> How to upload data (and metadata) using the API (tutorial:</p> <p>This jupyter notebook tutorial provides you a quick way of having all the code at hand to upload your data and metadata to the OEP.</p> <p> Use the OEP Client to upload data to the OEP (GitHub link):</p> <p>This is a link to GitHub where the OEP Client resides, including the documentation. You can use the OEP Client to upload data to the OEP. Below are two more specific tutorials providing you with hands-on information to use the OEP Client.</p> <p> Upload data using the OEP Client in a python script (tutorial):</p> <p>This jupyter notebook tutorial provides you a quick way of having all the code at hand to use the OEP Client to upload your data and metadata to the OEP. You will use a python script.</p> <p> Upload data using the OEP Client in the command line (tutorial):</p> <p>This jupyter notebook tutorial provides you a quick way of having all the code at hand for using the OEP Client to upload your data and metadata to the OEP. You will use the command line.</p>","tags":["jupyter","api"]},{"location":"courses/04_upload/#what-does-publish-mean","title":"What does 'publish' mean?","text":"<p>To publish something generally means to make it accessable to people. In this case specifically it stands for: - Move table from the model draft to a target data theme on the OEP. For data to be publish onto the OEP it must have an Open Data license.  For further information see SPDX-Datalicense list</p>","tags":["jupyter","api"]},{"location":"courses/04_upload/#how-can-i-publish-my-uploaded-table","title":"How can I publish my uploaded table?","text":"<p> [Tutorial to the publishing process]((../tutorials/99_other/publish.md)    Tutorial to the publishing process using the API Comment: all tutorials and chapters will be linked here. Note: As long as the data is published, it cannot be changed. It is possible to 'unpublish' data.</p>","tags":["jupyter","api"]},{"location":"courses/04_upload/#what-does-embargo-mean","title":"What does 'embargo' mean?","text":"<p>Generally an 'embargo period' means a period during which access to academic publication is not allowed to users who have not paid for access. In this case it stands for: - A period of time during which data cannot be accessed without permission. Von wem? - The OEP Dataviewer is blocked, as well as the API-based data access.</p>","tags":["jupyter","api"]},{"location":"courses/04_upload/#how-can-i-apply-an-embargo-period","title":"How can I apply an embargo period?","text":"<p>Comment: all tutorials and chapters will be linked here. Note: The embargo can be set during data upload and data publication. Only embargo periods of 6 months or 1 year are possible. Embargoed data still requires an open license in order to be published.</p>","tags":["jupyter","api"]},{"location":"courses/04_upload/#about-this-course","title":"About this course","text":"<ul> <li>Authors: Hannah F\u00f6rster, Anne Siemons, Vismaya Jochem</li> <li>Copyright: \u00d6ko-Institut (2022)</li> <li>Contact: oedb@oeko.de</li> <li>License: CC BY 4.0</li> <li>Attribution: \u00d6ko-Institut (2022): Upload - Contribute data to the OEP.</li> <li>Last update: 2024-10-21</li> <li>You can provide feedback to this course on GitHub: https://github.com/OpenEnergyPlatform/academy/issues/166</li> </ul>","tags":["jupyter","api"]},{"location":"courses/05_ontology/","title":"05 - The Open Energy Ontology (OEO)","text":"<p>Learn about how to become an OEO developer and which skills are helpful to join in on developing the OEO.  You can provide feedback to this course on GitHub: https://github.com/OpenEnergyPlatform/academy/issues/167</p>"},{"location":"courses/05_ontology/#how-to-become-an-oeo-developer","title":"How to become an OEO developer","text":""},{"location":"courses/05_ontology/#for-whom-is-this-training-and-what-can-you-learn","title":"For whom is this training and what can you learn?","text":"<p> This course is aimed at (energy system) researchers who want to</p> <ul> <li>understand the OEO design choices,</li> <li>get to know the OEO development processes,</li> <li>participate in ontology development and</li> <li>collaborate developping a powerful open-source tool to enhance data management in the energy domain under the FAIR principles.</li> </ul> <p> After reading the sections of this module, you will know</p> <ul> <li>which skills you need for OEO development,</li> <li>how the OEO development process works and</li> <li>how to participate in OEO development.</li> </ul>"},{"location":"courses/05_ontology/#what-are-prerequisit-skills-for-ontology-development","title":"What are prerequisit skills for ontology development?","text":"<p>The following skills will help you understand the OEO better and enable you to participate in its development:</p> <ol> <li>BFO basics</li> <li>Prot\u00e9g\u00e9 and OWL basics</li> <li>GitHub and git</li> <li>OEO specific knowledge</li> </ol>"},{"location":"courses/05_ontology/#1-bfo-basics","title":"1. BFO basics","text":"<p>The OEO uses the formal structure and design principles of the Basic Formal Ontology (BFO). The more familiar you are with BFO, the better you will be able to contribute to the OEO development process.</p> <p> This video tutorial (78 min) provides an overview and introduction to BFO. Building Ontologies with Basic Formal Ontology</p> <p> The standard literature on BFO is Arp, Smith and Spear (2015): Building Ontologies with Basic Formal Ontology. If you decide to become an OEO developer, you should read this book. It is also a helpful work of reference.</p> <p>The BFO code is hosted on GitHub where the wiki page also provides further publications and information on BFO.</p>"},{"location":"courses/05_ontology/#2-protege-and-owl-basics","title":"2. Prot\u00e9g\u00e9 and OWL basics","text":"<p>The OEO is based on the Web Ontology Language OWL and uses Manchester Syntax. Prot\u00e9g\u00e9 is the tool used for OEO development.</p> <p> To become familiar with Prot\u00e9g\u00e9 and OWL, we recommend studying the Pizza tutorial by Micheal DeBellis, especially chapter 1 to 7. For the tutorial, as well as OEO development, you will have to install Prot\u00e9g\u00e9 on your computer.</p> <p>You can find the OWL2 and Manchester Syntax documentation here for further reading.</p>"},{"location":"courses/05_ontology/#3-github-and-git-basics","title":"3. GitHub and git basics","text":"<p>The documentation of the OEO development, its discussion and version control all take place on GitHub. Therefore, it is necessary to be familiar with versioning control via git and GitHub as a platform.</p> <ul> <li>GitHub provides a helpful guide for the first steps with your GitHub account.</li> <li>There, you can also learn, how to set up git.</li> <li>An introductory tutorial on how to use git is available here.</li> </ul>"},{"location":"courses/05_ontology/#which-oeo-specific-knowledge-do-i-need","title":"Which OEO specific knowledge do I need?","text":"<p> Introducing the Open Energy Ontology: Enhancing data interpretation and interfacing in energy systems analysis We published an introductory paper about the OEO in the journal Energy and AI in 2021. It provides a good overview over the domain, the structure and the workflow of OEO development.</p> <p> OEO Wiki The OEO wiki provides details on how best practice principles of ontology development are applied to OEO development.</p> <p> The representation of energy, energy carriers and fuels in the Open Energy Ontology Energy is a complex physical phenomenon and challenging to describe ontologically. We published another OEO specific paper that describes how we decided to represent energy and energy carriers in the OEO.</p>"},{"location":"courses/05_ontology/#i-have-read-everything-how-can-i-join-the-developer-team-now","title":"I have read everything - how can I join the developer team now?","text":"<ol> <li>Get in touch with us! You can use the contact form on the OEP to establish initial contact, and we will come back to you. </li> <li>We always welcome new members to the development team in our regular oeo-dev-meetings, where we discuss organisational things and content related issues.</li> <li>To participate in the OEO development and discussion process on GitHub, you will need to become part of the OpenEnergyFamily organisation.</li> <li>Afterwards, you can follow all instructions and explanations of the general workflow in the CONTRIBUTING.md on GitHub.</li> <li>In all discussions, whether in an online meeting or on GitHub, we follow our Code of Conduct.</li> </ol>"},{"location":"courses/05_ontology/#about-this-course","title":"About this course","text":"<ul> <li>Authors: Mirjam Stappel, Christian Hofmann, Hannah F\u00f6rster, Christian Winger, Ulf Mueller</li> <li>Copyright: Otto-von-Guericke-Universit\u00e4t, Fraunhofer IEE, \u00d6ko-Institut, Reiner Lemoine Institut (2023)</li> <li>Contact: SIROP@iee.fraunhofer.de.</li> <li>License: CC BY 4.0</li> <li>Attribution: Fraunhofer IEE, Reiner Lemoine Institut, Otto-von-Guericke-Universit\u00e4t, \u00d6ko-Institut (2023): Contribute to the OEO.</li> <li>Last update: 2024-10-21</li> <li>You can provide feedback to this course on GitHub: https://github.com/OpenEnergyPlatform/academy/issues/167</li> </ul>"},{"location":"courses/06_enable_comparisons/","title":"06 - Comparing data - Enable scenario projection comparison","text":"<p>This training course provides guidance on how you can document typical numerical data from climate and energy modelling so that the likelihood of a good-quality semi-automated scenario projection comparison based on the Open Enrgy Knowledgegraph (OEKG) increases.</p> <p>You can provide feedback to this course on GitHub: https://github.com/OpenEnergyPlatform/academy/issues/174</p>"},{"location":"courses/06_enable_comparisons/#for-whom-is-this-training-and-what-can-you-learn","title":"For whom is this training and what can you learn?","text":"<p> This course is aimed at researchers, no matter whether you have programming skills or not, who want</p> <ul> <li>to publish their data on the OEP</li> <li>that their data enables good quality scenario projection comparisons</li> </ul> <p> After reading the sections of this training course you will</p> <ul> <li>be able to document key scenario projection data in a way that helps the Open Energy Knowledge Graph (OEKG) to process semi-automated scenario projection comparisons</li> </ul>"},{"location":"courses/06_enable_comparisons/#why-is-it-important-to-document-my-numerical-data-in-a-certain-way","title":"Why is it important to document my numerical data in a certain way?","text":"<p>The OEP allows you to contribute numerical data in any structure and in any unit you want to. This is an important design feature of the OEP: it allows for a broad contribution of scenario projection data from heterogenous backgrounds. By allowing this, the OEP makes it easy for its users to contribute their data, without forcing them to invest additional time to obey to a mandatory format.</p> <p>This potential heterogenity of how numerical data is structured and documented in terms of units, makes it challenging for semi-automated scenario projection comparisons to provide spot on results.</p> <p>Thus, we decided to provide some guidance on how to document your data so that the likelihood increases this data contributes to good quality semi-automated scenario projection comparisons that - sometime in the future - the OEKG will offer on the OEP.</p> <p>Below we compiled a limited list of key input- and output data to many energy systems models. For those we suggest to report data in specific units.</p> <p>Below we summarise this in a tabular format for easy reference. We name the variable / parameter and the unit we suggest you to report that information.</p> <p>If a variable / parameter is already represented in the Open Energy Ontology (OEO) we link to its definition the first time it occurs below so that you can check for its exact definition.</p>"},{"location":"courses/06_enable_comparisons/#key-output-data","title":"Key output data","text":"Data Suggested unit Note GHG emissions per sector Mt CO2e if possible by sector using a CRF sector division or a CRF-based sector division CO2 emissions Mt CO2e if possible by sector using a CRF sector division or a CRF-based sector division marginal cost of electricity generation Euro (base year) / MWh real monetary values allow easier comparison levelised cost of electricity generation Euro (base year) / MWh real monetary values allow easier comparison net electricity imports GWh total gross electricity generation GWh total net electricity generation GWh (peak electricity generation) GWh"},{"location":"courses/06_enable_comparisons/#key-input-data","title":"Key input data","text":"Data Suggested unit Note GDP Million Euro (base year) real monetary values allow easier comparison Gross value added per sector Million Euro (base year) real monetary values allow easier comparison Population persons International natural gas import price Euro (base year) / MWh real monetary values allow easier comparison International crude oil import price Euro (base year) / MWh real monetary values allow easier comparison International coal import price Euro (base year) / MWh real monetary values allow easier comparison Total primary energy consumption MWh Primary energy consumption by energy carrier MWh Total final energy consumption MWh Final energy consumption by sector MWh Final energy consumption by energy carrier MWh Steel production Mt Cement production Mt Passenger transport performance (all modes) Million pkm Freight transport performance (all modes) Million tkm Heating degree days \u00b0C temperature sum Cooling degree days \u00b0C temperature sum Total Generation capacity MW Generation capacity by energy carrier MW Energy storage MWh Grid restrictions true/false"},{"location":"courses/06_enable_comparisons/#about-this-course","title":"About this course","text":"<ul> <li>Authors: Hannah F\u00f6rster</li> <li>Copyright: \u00d6ko-Institut (2023)</li> <li>Contact: oedb@oeko.de. License: CC BY 4.0</li> <li>Attribution: \u00d6ko-Institut (2023): Comparing data - Enable scenario projection comparison on the Open Energy Platform.</li> <li>Last update: 2024-10-21</li> <li>You can provide feedback to this course on GitHub: https://github.com/OpenEnergyPlatform/academy/issues/174</li> </ul>"},{"location":"courses/07_metadata/","title":"07 - Metadata","text":"<p>You can provide feedback to this course on GitHub</p>","tags":["metadata"]},{"location":"courses/07_metadata/#who-is-this-course-for-and-what-can-you-learn","title":"Who is this course for and what can you learn?","text":"<p> This course is aimed at researchers, who want to</p> <ul> <li>publish their data on the OEP</li> <li>provide metadata along with their energy data</li> </ul> <p> After reading the sections of this training course you will know</p> <ul> <li>what OEMetadata are and how they are structured</li> <li>where to find data with OEMetadata and how to create your own</li> <li>how to upload, download and edit OEMetadata</li> <li>how to use the different tools available for OEMetadata</li> </ul>","tags":["metadata"]},{"location":"courses/07_metadata/#introduction-what-is-metadata","title":"Introduction: What is Metadata?","text":"<p>Metadata, in simple terms, refer to data about data. They provide valuable information regarding the characteristics, properties, and context of a specific data item. Metadata answer the questions of \"who, what, when, where, and how\" related to the data. Metadata plays a crucial role in organizing, managing, and understanding information.</p>","tags":["metadata"]},{"location":"courses/07_metadata/#what-is-the-open-energy-metadata","title":"What is the Open Energy Metadata?","text":"<ul> <li>Open Energy Metadata (OEMetadata) describe a metadata standard used to annotate energy related data</li> <li>The development of OEMetadata is a community effort and takes place on GitHub</li> <li>In the following sections of this course we have collected information on how to use the standard</li> <li>There is a short  tutorial on how to get started with OEMetadata</li> </ul>","tags":["metadata"]},{"location":"courses/07_metadata/#whats-the-meaning-of-all-the-metadata-keys","title":"What's the meaning of all the metadata keys?","text":"<ul> <li>The OEMetadata repository provides a comprehensive list of keys, along with their meanings and examples of their uses, in the key description section.</li> </ul>","tags":["metadata"]},{"location":"courses/07_metadata/#how-can-i-work-with-oemetadata","title":"How can I work with OEMetadata?","text":"<ul> <li> Tutorial to create OEMetaData This tutorial gives a detailed description on how to create and modify OEMetaData (with the OEOMetaDataBuilder).</li> <li>A  guide on publishing data on the OEP includes the creation of metadata</li> <li>For all datasets on the Open Energy Platform (OEP), you can look at provided metadata by clicking on \"Meta Information\"</li> <li>If you are the owner of the dataset, you can click \"edit\" and you're directly working on the OEMetadata</li> </ul>","tags":["metadata"]},{"location":"courses/07_metadata/#what-other-tools-to-work-with-oemetadata-are-there","title":"What other tools to work with OEMetadata are there?","text":"<ul> <li>A tool for metadata conversion and integration is <code>OMI</code></li> <li>An additional helpful tool for publishing a set of data with associated metadata is oem2orm. It can translate table descriptions from metadata into a database structure via an object relational mapper. That way it can take a valid pair of data and metadata and upload it directly to the OEP. The structures of both need to be valid.</li> <li>The <code>oep client</code> is a tool that can create, upload, download and delete tables. It also downloads and updates metadata. It's more versatile than oem2orm but less focussed on metadata. There is a  tutorial using the oep-client to upload some data and metadata</li> <li>How to  Validate that your metadata is a datapackage</li> </ul>","tags":["metadata"]},{"location":"courses/07_metadata/#supplementary-material-and-further-readings","title":"Supplementary material and further readings","text":"<ul> <li>A poster that describes the structure of the OEMetadata and their relation to the Open Energy Ontology:</li> <li>[Poster] Open Energy Metadata (OEMetadata): Publishing Energy Data Enriched with Ontology References </li> <li>A presentation that describes the ontology structure in detail and puts it in broader context</li> <li>[Presentation] Capacity building session - H\u00fclk - Publication of FAIR Data and Metadata: </li> </ul>","tags":["metadata"]},{"location":"courses/07_metadata/#about-this-course","title":"About this course","text":"<ul> <li>Authors: christian-rli, Ludwig H\u00fclk (@Ludee)</li> <li>Copyright: Reiner Lemoine Institut</li> <li>Contact: christian.hofmann@rl-institut.de</li> <li>License: CC-BY-4.0</li> <li>Attribution: Open Energy Academy - Metadata Course \u00a9 Reiner Lemoine Institut</li> <li>You can provide feedback to this course on GitHub</li> </ul>","tags":["metadata"]},{"location":"courses/08_licensing/","title":"08 - Licensing","text":"<p>You can provide feedback to this course on GitHub: https://github.com/OpenEnergyPlatform/academy/issues/188</p>"},{"location":"courses/08_licensing/#for-whom-is-this-training-and-what-can-you-learn","title":"For whom is this training and what can you learn?","text":"<p> This course is aimed at researchers, who want to</p> <ul> <li>publish data and need to choose a license</li> <li>download and use data with an open license</li> </ul> <p> After reading the sections of this training course you will</p> <ul> <li>understand the basic concept of copyright and licenses</li> <li>feel confident about using licensed materials</li> <li>know how to apply proper attributions to open data</li> </ul>"},{"location":"courses/08_licensing/#introduction","title":"Introduction","text":"<p>It is crucial to license data when conducting research. Digital information is governed by copyright laws, and without a clear context, it is uncertain whether others can use your data. By providing a license, you automate the process of seeking permission, which benefits both the giver and the receiver. However, it is important to note that in some countries, such as Germany, it is not possible to simply waive one's copyright. A license offers legal clarity for data usage, ensuring that both parties are protected. When selecting a license, it is advisable to choose an established one that addresses questionable edge cases and offers unambiguous terms.</p>"},{"location":"courses/08_licensing/#open-data","title":"Open Data","text":"<p>Data that lack a suitable open license cannot be considered as open. The Open Knowledge Foundation defines open data and content as following.</p> <p>The Open Definition</p> <p>\u201cOpen data and content can be freely used, modified, and shared by anyone for any purpose.\"</p> <p>This means that open data licenses grant users the four fundamental freedoms originally defined for free software.</p> <ul> <li>The freedom to run the program for any purpose.</li> <li>The freedom to study how the program works and modify it as needed, which requires access to the source code.</li> <li>The freedom to distribute copies to others and help them.</li> <li>The freedom to distribute modified copies to others.</li> </ul> <p>These freedoms can also be applied to open data, allowing users to freely use, analyse, share, and modify the data. The main difference between open data licenses and free or open-source software licenses lies in the obligations that must be met to obtain these rights.</p> <p>There are lists of already established open source licenses that ensure the four freedoms, such as the list provided by the Open Source Initiative (OSI). However, it is essential to understand the specific characteristics of each license to determine which one is best suited for your data.</p> <p> Open Data Licenses:</p> <p>Learn the different types of Open Data licenses and where to use them.</p>"},{"location":"courses/08_licensing/#application-in-oemetadata","title":"Application in OEMetadata","text":"<p>The Open Energy Metadata Standard is based on the Frictionless Data Package Specifications. The license for a resource (table or datapackage) is specified by three fields:</p> <ul> <li>name: An identifier of the SPDX License List</li> <li>path: A URL or path (string, that is a fully qualified HTTP address, or a relative POSIX path)</li> <li>title: A human-readable title of the license</li> </ul> <p>More details on applying licenses can be found in the Frictionless Data blog post. Additionally, the metadata include two useful keys that simplify reuse and legal understanding:</p> <ul> <li>instruction: A short description of rights and restrictions. The use of tl;drLegal is recommended. For Example: \"You are free to share and change, but you must attribute, and share derivations under the same license. See for further information.\"</li> <li>attribution: The copyright owner of the data. If attribution licenses are used, that name must be acknowledged. For Example: \"\u00a9 Reiner Lemoine Institut\"</li> </ul> <p>The license is included as an array (list) by default. This allows for dual licensing.</p> <p> OEMetadata keys with a description and example</p>"},{"location":"courses/08_licensing/#licensing-in-practice","title":"Licensing in practice","text":"<p>In practice, licensing plays a crucial role in the use of open data, ensuring proper attribution, legal compliance, and enabling the freedom to share and modify data. The OEMetadata standard recognises the significance of licenses in open data and provides a structured approach for documenting license information.</p> <p>Research and documentation of license information within the OEMetadata standard offer several benefits. Firstly, it facilitates transparency by clearly stating the permissions and restrictions associated with the data. By specifying the license name, path, and title, users can easily understand the terms under which the data can be used, modified, and distributed.</p>"},{"location":"courses/08_licensing/#using-open-data","title":"Using Open Data","text":"<p>Within the OEMetadata string, it is essential to gather and store comprehensive license information alongside the data. Additionally, it is recommended to include an additional entry in the contributions section to document the provenance of the data, ensuring traceability and transparency. When republishing or visualizing the data, it is crucial to create a proper attribution string based on the provided information. Typically, the attribution string should contain the following elements:</p> <ul> <li>Title: Include the title or name of the dataset, providing a clear and concise description of its content.</li> <li>Source: Specify the source from which the data originated, indicating the repository, website, or platform where it was obtained. A link to the source of the data, can be a URL or DOI.</li> <li>Author / Copyright holder: Acknowledge the individual or organisation that holds the copyright or is the primary creator of the data. The information from attribution.</li> <li>Author link: A link to the homepage.</li> <li>License: Clearly state the license under which the data is released, ensuring compliance with its terms and conditions. Name and identifier of the license.</li> <li>License link: A link to the license text.</li> </ul> <p>A suitable format is:</p> <p>\"Title\" [Source] \u00a9 Author [Author link] | License [License link]</p> <p>For example:</p> <p>\"MaStR - Marktstammdatenregister\" \u00a9 Bundesnetzagentur f\u00fcr Elektrizit\u00e4t, Gas, Telekommunikation, Post und Eisenbahnen | Datenlizenz Deutschland \u2013 Namensnennung \u2013 Version 2.0 (DL-DE-BY-2.0)</p>"},{"location":"courses/08_licensing/#using-protected-data-and-data-without-licenses","title":"Using protected data and data without licenses","text":"<p>The use of non-open data has been a topic of increasing importance. While open data initiatives have gained momentum globally, there remains a significant amount of data that is freely accessible on the internet or published somewhere else. Non-open data refers to datasets that are publicly available but have restrictions on usage, or require specific permissions for access.</p> <p>Non-open data sources can include government databases, proprietary datasets held by private companies, academic research data, and sensitive information such as personal or confidential data. These datasets often contain valuable information that can contribute to research, analysis, policy-making, and decision-making processes. The utilisation of non-open data presents unique challenges and considerations. Access to these datasets may be limited due to legal, privacy, or commercial reasons. Researchers and data practitioners need to navigate licensing agreements, contact the copyright holders, negotiate data-sharing agreements, and comply with data protection regulations to gain access to non-open data.</p> <p>In Germany, the Act on Copyright and Related Rights / Gesetz \u00fcber Urheberrecht und verwandte Schutzrechte (Urheberrechtsgesetz) contains the paragraph 60c Scientific research (Copyright Act, \u00a7 60c Scientific Research) that provides provisions specifically for non-commercial scientific research. According to this law:</p> <ul> <li>Up to 15 percent of a work may be reproduced, distributed, and made publicly accessible for the purpose of non-commercial scientific research. This can be done for a specific group of individuals conducting their own scientific research, as well as for individual third parties for the purpose of assessing the quality of scientific research.</li> <li>Up to 75 percent of a work may be reproduced for one's own scientific research.</li> </ul> <p>Regarding non-open data, the application of \u00a7 60c depends on the specific circumstances and licensing agreements associated with the non-open datasets. Researchers and data practitioners must ensure that they comply with copyright laws, licensing agreements, and any applicable data protection regulations when accessing and using non-open data for scientific research. The provisions may provide some flexibility in reproducing and utilising copyrighted materials within the context of non-commercial scientific research, but the specific permissions and limitations for non-open data should be carefully reviewed and adhered to.</p> <p>In conclusion, while open data initiatives have made significant progress, the use of non-open data remains a reality. Overcoming the challenges associated with non-open data requires collaboration, adherence to ethical and legal standards, and a concerted effort to promote transparency and data sharing. By addressing these issues, researchers and data practitioners can harness the full potential of both open and non-open data sources to drive innovation, enhance decision-making, and foster societal progress.</p>"},{"location":"courses/08_licensing/#select-and-apply-a-license-for-data","title":"Select and apply a license for data","text":"<p>When selecting a suitable open license for data, several considerations come into play. Legal implications and jurisdiction-specific regulations should also be taken into account. Different countries may have their own legal frameworks governing open data licenses, so it is important to ensure compliance with relevant laws. It is important to choose a license that aligns with the principles of open data, promoting accessibility, reuse, and collaboration. The choice of license should reflect the intended type of material (software, data, artwork) and the desired obligations, if any, on data usage. Some licenses may require attribution, ensuring proper credit is given to the original data creators and copyright holder. Some licenses require that you choose the exact same license for aggregated or modified data. It can be described as reciprocal, hereditary or (negatively connotated) virulent.</p> Public Domain Attribution Share-Alike Openness As open as possible, but others can create non-open derivatives of it. Open and suitable for academic work. Open and will be open forever. Use-Case Data for which no attribution to authors is required, e.g. \"helper tables\" for conversions. Data for which naming of the authors and/or copyright holders is required, e.g. \"input and result data\". Data where naming of the authors is required and all further updates must be open as well, e.g. \"manual collection of technical parameters from factsheets\". Example Creative Commons Zero v1.0 Universal (CC0) Creative Commons Attribution 4.0 International (CC-BY-4.0) ODC Open Database License v1.0 (ODbL-1.0) <p>Once a license is chosen, it is essential to properly apply and document the license information. This can be done by including the license statement and relevant details within the data documentation and metadata. The license information should clearly state the terms and conditions under which the data is made available, including any requirements for attribution, modifications, and redistribution.</p> <p> Checklist for working with open data</p>"},{"location":"courses/08_licensing/#licence-compatibility","title":"Licence compatibility","text":"<p>Ensuring licence compatibility between various different licences is usually a challenging manual task. The auditor should have a sound understanding of legal concepts and its subtle nuances.</p>"},{"location":"courses/08_licensing/#dalicc","title":"DALICC","text":"<p>The project DALICC (\"Data Licenses Clearance Center\") is an EU-funded research project aimed at developing a platform and tools to support the identification, clearance, and management of data licenses. The project's goal is to address the challenges surrounding data licensing in order to foster data interoperability, reuse, and sharing while ensuring legal compliance.</p> <p>The project focuses on developing innovative technologies and methodologies to automate and streamline the process of understanding and managing data licenses. It aims to provide a comprehensive framework for organisations and individuals to identify the licenses applicable to their data, analyse the rights and restrictions associated with those licenses, and manage compliance accordingly.</p> <p>The platform integrates legal knowledge and natural language processing techniques to interpret and analyse license texts, allowing users to obtain a better understanding of the rights and obligations associated with data licenses. It also provides functionalities for assessing license compatibility, automating clearance processes, and facilitating data sharing within legal boundaries.</p> <p>Overall, the DALICC project aims to address the complex landscape of data licensing by providing tools and solutions that simplify the identification, clearance, and management of licenses, promoting data interoperability, and facilitating legal compliance in data-driven environments.</p> <p>The first component makes a reference to the ODRL information model to express permissions, duties and prohibitions stated in a license. It uses vocabularies from ODRL, CCRel and particular extensions to describe licenses for machine processing in a legally valid manner. In this respect a license can be understood as a policy that defines specific actions as permissions, duties or prohibitions.</p> <p>The second component is the so-called Dependency Graph. This graph expresses the valid relationships between various actions defined in a license. The graph currently consists of three basic relationships: \u201cincluded in\u201d, \u201cimplies\u201d and \u201ccontradicts\u201d. The graph is used to check the consistency of the license itself and to detect potential conflicts arising from contradicting actions defined in two or more licenses.</p> <p> DALICC API - compatibilitycheck</p>"},{"location":"courses/08_licensing/#supplementary-material-and-further-readings","title":"Supplementary material and further readings","text":""},{"location":"courses/08_licensing/#foster-portal","title":"FOSTER Portal","text":"<p>The FOSTER portal is an e-learning platform that brings together the best training resources addressed to those who need to know more about Open Science, or need to develop strategies and skills for implementing Open Science practices in their daily workflows. Here you will find a growing collection of training materials. Many different users - from early-career researchers, to data managers, librarians, research administrators, and graduate schools - can benefit from the portal. In order to meet their needs, the existing materials will be extended from basic to more advanced-level resources. In addition, discipline-specific resources will be created.</p> <p> FORSTER Course: Open Licensing</p>"},{"location":"courses/08_licensing/#about-this-course","title":"About this course","text":"<ul> <li>Authors: Ludwig H\u00fclk, Christian Hofmann</li> <li>Copyright: Reiner Lemoine Institut</li> <li>Contact:</li> <li>License: CC-BY-4.0</li> <li>Attribution: Open Energy Academy - Licensing Course \u00a9 Reiner Lemoine Institut</li> <li>You can provide feedback to this course on GitHub: https://github.com/OpenEnergyPlatform/academy/issues/188</li> </ul>"},{"location":"courses/09_peer_review/","title":"09 - Open Peer Review","text":"<p>This course will introduce you to Open Peer Review on the OEP. At the moment it provides basic insights into Open Peer Review. </p> <p>You can provide feedback to this course on GitHub: https://github.com/OpenEnergyPlatform/academy/issues/189</p> <p>Note</p> <p>The Open Peer Review on the OEP is currently under development!</p>","tags":["open peer review","curation","open science"]},{"location":"courses/09_peer_review/#for-whom-is-this-training-and-what-can-you-learn","title":"For whom is this training and what can you learn?","text":"<p> This course is aimed at researchers, who</p> <ul> <li>publish data and seek a quality check for the metadata to ensure accuracy and completeness</li> <li>want to review and enhance an existing dataset, ensuring its reliability, relevance, and usability</li> </ul> <p> After reading the sections of this training course you will</p> <ul> <li>understand the developed open peer review for open data</li> <li>be able to start and complete an open peer review on the OEP</li> <li>contribute to and improve the implemented review process</li> </ul>","tags":["open peer review","curation","open science"]},{"location":"courses/09_peer_review/#introduction-what-is-open-peer-review","title":"Introduction: What is Open Peer Review?","text":"<p>In the realm of open science, Open Peer Review (OPR) is gaining increasing significance as an alternative approach to evaluating scholarly works. Unlike traditional peer review processes, which often lack transparency and clear criteria, OPR distinguishes itself through specific characteristics. This chapter delves into the features and benefits of OPR, focusing on the criticisms of conventional peer reviews and highlighting the importance of transparency, open participation, and identifiable contributors in the evaluation process. Additionally, we explore how OPR facilitates broader involvement from experts and interest groups, leading to improved quality and validation of research findings.</p> <p>Ross-Hellauer's 2017 study identified four key features that differentiate an open peer review from conventional peer review.</p>","tags":["open peer review","curation","open science"]},{"location":"courses/09_peer_review/#open-identities","title":"Open Identities","text":"<p>Open Peer Review (OPR) adopts an unblinded review approach, where in contrast to traditional peer review processes, both reviewers and authors are openly acknowledged and documented. In a single-blind review, the identities of the reviewers are known to the authors (or contributors), while the authors' identities remain concealed. This aims to mitigate biases that could arise from authors' reputations or affiliations. A downside is the lack of incentive for the extra work and time. In contrast, the open identities in OPR serve as a motivating factor for conducting accurate work and ensure visibility of contributions within the community.</p>","tags":["open peer review","curation","open science"]},{"location":"courses/09_peer_review/#open-reports","title":"Open Reports","text":"<p>Open reports entail the inclusion of the reviewer's report along with their name. This introduces transparency to what was previously an opaque and boolean process. Like open identities, this heightened transparency is anticipated to enhance the quality of reviews, as the report becomes accessible to the public. It serves as an additional incentive or reward for reviewers.</p>","tags":["open peer review","curation","open science"]},{"location":"courses/09_peer_review/#open-participation","title":"Open Participation","text":"<p>Open participation expands the review process beyond a single person or a small group of experts to include a larger community or group. While traditional peer review often involves inviting a select few individuals to participate, open participation allows interested parties to provide structured feedback or comments. By increasing the number of reviewers, the dominance of individual interests can be avoided. Embracing multiple perspectives and diverse knowledge enhances the accuracy of the review, which may be lacking when conducted by an individual alone. Additionally, previously overlooked groups have the opportunity to contribute to the process. Therefore, not only selected individuals from academia, but also groups from industry or members of interest groups can actively participate.</p>","tags":["open peer review","curation","open science"]},{"location":"courses/09_peer_review/#open-platforms","title":"Open Platforms","text":"<p>Open Platforms play a crucial role in facilitating the implementation of open peer review and fostering collaboration within the scholarly community. It is a digital space where researchers can engage in transparent and interactive review processes. Needed functionalities are data or document sharing, version control, commenting, and collaborative editing, enabling reviewers and authors to exchange feedback and ideas seamlessly. The platform needs to incorporate features that support open identities, open reports, and open participation, ensuring a transparent and inclusive environment for the review process.</p> <p>The Open Energy Platform (OEP) serves as a community platform for conducting Open Peer Review (OPR) in the field of energy research. It provides a robust infrastructure that enables researchers to openly share and review energy-related datasets, methodologies, and findings. With its features designed for transparency, collaboration, and open participation, the OEP empowers the energy research community to engage in rigorous and inclusive peer review, driving the advancement of knowledge and fostering innovation in the field of energy.</p>","tags":["open peer review","curation","open science"]},{"location":"courses/09_peer_review/#how-do-you-review-open-data","title":"How do you review open data?","text":"<p> [Tutorial on Open Peer Review] (link to tutorial once its published)  This tutorial gives a detailed step by step description of the Open Peer Review Process on the OEP.</p> <p>Adapting an open peer review process to open data and its metadata involves a structured approach to ensure the quality and reliability of the information. The current development on the OEP provides the functionality to review and comment on every metadata key of the published data. The reviewer can either Accept, Suggest, or Deny an entry and can provide a value suggestion and a comment. The review is structured after the main sections of the Open Energy Metadata standard. It offers a progress indicator and a summary page.</p>","tags":["open peer review","curation","open science"]},{"location":"courses/09_peer_review/#how-to-evaluate-and-present-the-review-what-are-badges","title":"How to evaluate and present the review? What are badges?","text":"<p>Based on a scientific survey, the individual metadata keys were evaluated and categorized into groups. By accepting all entries in this section, a corresponding badge is awarded. These badges are named after precious metals such as \"iron,\" \"bronze,\" \"silver,\" \"gold,\" and \"platinum.\"</p> <ul> <li>Iron \u2013 Technically required for data structure</li> <li>Bronze \u2013 Basic description of the data</li> <li>Silver \u2013 Supplement description of the data</li> <li>Gold \u2013 Extended description of the context</li> <li>Platinum \u2013 Ontological annotation</li> </ul>","tags":["open peer review","curation","open science"]},{"location":"courses/09_peer_review/#who-is-involved-in-a-review","title":"Who is involved in a review?","text":"","tags":["open peer review","curation","open science"]},{"location":"courses/09_peer_review/#data-contributor","title":"Data Contributor","text":"<p>The original creator of a table has all permissions and is the owner.</p>","tags":["open peer review","curation","open science"]},{"location":"courses/09_peer_review/#reviewer","title":"Reviewer","text":"<p>Every registered member of the OEP can start a OPR of every table. You cannot start the review of the tables if you are the owner.</p>","tags":["open peer review","curation","open science"]},{"location":"courses/09_peer_review/#editor-community-manager","title":"Editor / Community Manager","text":"<p>The editor asks members to start and submit a review for specific tables. When a review started and is not completed the editor can close the review to proceed. In case the contributor and reviewer do not come to an agreement, the editor decides. The editor is not implemented yet.</p>","tags":["open peer review","curation","open science"]},{"location":"courses/09_peer_review/#supplementary-material-and-further-readings","title":"Supplementary material and further readings","text":"<ul> <li>Journal of Open Source Software (JOSS): A developer friendly, open access journal for research software packages.</li> <li>Ross-Hellauer T, Deppe A, Schmidt B (2017) Survey on open peer review: Attitudes and experience amongst editors, authors and reviewers. PLOS ONE 12(12): e0189311. https://doi.org/10.1371/journal.pone.0189311</li> </ul>","tags":["open peer review","curation","open science"]},{"location":"courses/09_peer_review/#about-this-course","title":"About this course","text":"<ul> <li>Authors: Ludwig H\u00fclk (Ludee), Christian Hofmann, Stephan Uller</li> <li>Copyright: Reiner Lemoine Institut</li> <li>Contact: datenzentrum@rl-institut.de</li> <li>License: Creative Commons Attribution 4.0 International (CC-BY-4.0)</li> <li>Attribution: Open Energy Academy - Licensing Course \u00a9 Reiner Lemoine Institut | CC-BY-4.0</li> <li>You can provide feedback to this course on GitHub: https://github.com/OpenEnergyPlatform/academy/issues/189</li> </ul>","tags":["open peer review","curation","open science"]},{"location":"courses/10_scenario_bundle/","title":"10 - What is a scenario bundle on the Open Energy Platform and how to create one","text":"<p>THIS COURSE IS UNDER DEVELOPMENT</p>"},{"location":"courses/10_scenario_bundle/#for-whom-is-this-training-and-what-can-you-learn","title":"For whom is this training and what can you learn?","text":"<p> This course is aimed at researchers, no matter whether you have programming skills or not, who want</p> <ul> <li>to enhance quantitative data on the OEP by context information that goes beyond the pure metadata annotation. </li> </ul> <p> After reading the sections of this training course you will</p> <ul> <li>be able to create a scenario bundle that describes context of data you have published on the OEP</li> </ul>"},{"location":"courses/10_scenario_bundle/#what-is-a-scenario-bundle","title":"What is a scenario bundle?","text":"<p>Scenario bundles weave together important information about one or more scenarios. They inform about studies made based on a scenario, including publications (= study report).</p> <p>If there is quantitative input data and / or output data available for a scenario projection, scenario bundles provide direct links to that data.  Scenario bundles  also inform about models (if available as a model factsheet) and frameworks (if available as a framework factsheet) that were used to project a scenario into the future.</p> <p>In a nutshell: A scenario bundle provides you with all relevant information to understand a scenario's context and to ease a potential re-use of quantitative data for your own purposes.</p>"},{"location":"courses/10_scenario_bundle/#how-to-create-a-scenario-bundle","title":"How to create a scenario bundle","text":"<ul> <li>Navigate to: https://openenergyplatform.org/scenario-bundles/main</li> <li>Click the +Create button </li> <li>Now you will be presented with various areas that you can populate with information about your scenario.</li> </ul> <p>Note: if you are presented with a drop-down menu in the following forms, you will see already existing entries that may fit what you want to add. Then simply choose this information. If the information (e.g. an author) is not yet available from a drop-down menu, simply start typing what you would want to enter and your information will be added to the open energy knowledge graph that works in the background. Some drop-down menus (e.g. scenario years) have fixed entries, and you won't be able to add your own information</p> <ul> <li> <p>Basic information:  Start with filling in the basic information. Scenario bundles are meant to describe scenarios that were part of a study (i.e. a project). Thus, please provide the study name, an acronym and the institutions that were involved int the study/project.</p> <p></p> </li> <li> <p>Study detail: The study detail area helps you describe more context about the study. Please provide the funding sources, a short abstract to describe the purpose of the study. If you do find one or more fitting study descriptors, please select which ones apply to your study.      </p> </li> <li> <p>Publications: This area gives you room to provide all publications that were made based on the scenarios you describe. You can add more than one study by clicking the + button on the left.      </p> </li> <li> <p>Sectors and technology: Here you specify details about the scenario projections you have provided in the scenario bundle. Which sectors have they projected? Please note you can hover over the (i) to receive definitions and explanations. A sector division informs about the \"method\" according to which sectors in a scenario are defined and made distinct from one another. Since the scenario bundles work with defintions available in the Open Energy Ontology, this area will let you choose from those sector divisions that are currently depicted by the OEO. If yours does not match any of these, please choose \"other\". Under Sectors you can then specify in more detail which sectors are depicted in your scenario projection. The ones available from the drop-down correspond to a sector divsion accordingly. If you have chosen \"other\" under sector divison, you do not need to choose items from the list here, unless the definition matches your definition. To check this, hover over the (i). </p> <p>Below the sector area you will be able to provide information on which technologies are depicted in your scenario projection. Check the boxes of these technologies and use the (i) to read its defintion in the OEO. </p> <p></p> </li> <li> <p>Scenarios: Here you specify details about the scenarios depicted in your study.  Please provide a name and acronym for your scenario and describe its characteristics in the abstract field. You can then specify the spatial region(s) (i.e. countries) depicted in your scenario via chossing the appropriate ones from the drop-down list. You can also do so for any regions your spatial region(s) is/are interacting in the scenario under interacting regions. Please choose which scenario years are projected in the data you provided on the OEP and which scenario type your scenario is.  At the bottom you can link any input and output dataset that elong to your scenarios projection data. For this click the + and type in the name or IRI of your data on the OEP and then choose the corresponding dataset from the drop-down menu. Repeat for any table that you wish to connect with your scenario bundle. </p> <p></p> </li> <li> <p>Models and frameworks: This area is dedicated to document which models were used in your study to project the scenario(s) into the future. For your models to show up in the drop-down menu models, a model factsheet needs to be present on the OEP. So if you wish to link your models here, but they are not available as a factsheet yet, please head over to the model factsheet area and add it there, and then come back here. Please note that the model factsheet area is not yet a perfect place, but it will work to document a few key characteristics and provide links to documentation. The same holds true for the area where you can document the  frameworks that were used to project the scenario(s) you are documenting. Head over to the framework factsheet area if yours is not yet available from the drop-down menu. </p> <p></p> </li> </ul> <p>At the end: do not forget to click the Save button. And voil\u00e0, you have created a scenario bundle that links a lot of context to data you have supplied on the OEP. Thank you for increasing transparency and re-use possibilities of that data.</p>"},{"location":"courses/10_scenario_bundle/#about-this-course","title":"About this course","text":"<ul> <li>Authors: Hannah F\u00f6rster</li> <li>Copyright: \u00d6ko-Institut (2024)</li> <li>Contact: oedb@oeko.de</li> <li>License: CC BY 4.0</li> <li>Attribution: \u00d6ko-Institut (2024): What is a scenario bundle on the Open Energy Platform and how to create one</li> <li>Last update: 2024-10-21</li> </ul>"},{"location":"legacy/05_ontology_legacy/","title":"05 - Ontology (legacy)","text":""},{"location":"legacy/05_ontology_legacy/#part-2-general-introduction-on-ontologies-and-the-oeo-under-construction","title":"Part 2 - General introduction on ontologies and the OEO -- Under construction!","text":""},{"location":"legacy/05_ontology_legacy/#how-can-i-contribute-to-the-open-energy-ontology","title":"How can I contribute to the Open Energy Ontology?","text":"<p>Development of the Open Energy Ontology (OEO) is a community effort and takes place on GitHub. In the following sections of this course we have bundled information on how to get involved and how to contribute to the OEO.</p> <p>You can provide feedback to this course on GitHub: https://github.com/OpenEnergyPlatform/academy/issues/167</p>"},{"location":"legacy/05_ontology_legacy/#for-whom-is-this-training-and-what-can-you-learn","title":"For whom is this training and what can you learn?","text":"<p> This course is aimed at researchers, policy makers and any interested person, who</p> <ul> <li>want to get an overview and a deeper understanding of the domain of energy system modelling and its underlying concepts,</li> <li>want to annotate their data with controlled terms, enhance its visibility and make it comparable and interoperable with existing data</li> <li>want to develop a powerful open-source tool to enhance data management in the energy domain under the FAIR principles.</li> </ul> <p> After reading the sections of this module, you will know</p> <ul> <li>what an ontology is and how the OEO works,</li> <li>what the benefits of contributing to the OEO are,</li> <li>what the different levels of contribution are and</li> <li>what steps you have to fulfill to add new terms and concepts to the OEO.</li> </ul>"},{"location":"legacy/05_ontology_legacy/#where-can-i-get-general-information-on-ontologies-and-the-oeo","title":"Where can I get general information on ontologies and the OEO?","text":"<p> The Open Energy Ontology \u2013 Overview:</p> <p> The Open Energy Ontology \u2013 Workshop:</p> <p>Get a quick overview what an ontology is and what the OEO is all about.</p> <p> Open Energy Ontology Viewer:</p> <p>Browse the terms of the OEO and their definitions and view their hierarchical structure.</p> <p> General introduction to the Open Energy Family:</p> <p>Learn how the OEO is embedded in the Open Energy Family (OEF).</p> <p> How to participate in the OEO:</p> <p>Learn how to get involved and start participating in the OEO.</p>"},{"location":"legacy/05_ontology_legacy/#why-should-i-contribute-to-the-oeo","title":"Why should I contribute to the OEO?","text":"<p> The OEO provides a controlled vocabulary for the domain of energy system modelling and energy research. Within the Open Energy Family the OEO links the different family members by means of a machine readable and machine actionable terminology. By this it ensures better comparability, interoperability, and reusability of research data on the platform and in the domain. By contributing to the OEO you can help building up a powerful tool for data annotation and comparison within energy research, make your data more visible and increase its impact in your working field.</p>"},{"location":"legacy/05_ontology_legacy/#how-do-i-get-started","title":"How do I get started?","text":"<p> How to participate in the OEO:</p> <p>Learn how to get involved and start participating to the OEO.</p> <p>Full Documentation on the OEO</p> <p>Learn about important topics and conventions when you start working on the OEO.</p> <p> Git How to:</p> <p> Git Cheat Sheet:</p> <p> Prot\u00e9g\u00e9 Getting Started:</p> <p>OEO development takes place on GitHub and uses tools like git and prot\u00e9g\u00e9. Here you can build up or refresh your knowledge on these tools (external links).</p> <p> Semantic structure of the OEO:</p> <p>Get familiar with the logic and semantic structure of the OEO.</p> <p> Guiding principles for contributions:</p> <p>Learn about the guiding principles for choosing terms, creating definitions and maintaining the taxonomy of the OEO.</p>"},{"location":"legacy/05_ontology_legacy/#what-different-ways-of-contributing-to-the-oeo-are-there","title":"What different ways of contributing to the OEO are there?","text":"<p> Contribution to the OEO can take place on different levels: You may only want to take part in discussions on topics you are interested in. Or you may want to implement new concepts to the OEO. To switch from discussing terms to implementing them and to get familiar with the process it can be a good idea to start with reviewing pull requests.</p> <p> How to participate in OEO discussions:</p> <p> Discussion workflow:</p> <p>Learn how to become a part of the community, find issues and join discussions about interesting topics.</p> <p> Review workflow:</p> <p>Learn how to create a pull request review.</p> <p> Implementing workflow:</p> <p>Get to know the steps you have to follow when implementing content e.g. concepts, terms, or their relations to the OEO.</p> <p> Workflow - overview:</p> <p>Find out how to take part in discussions and in OEO developer meetings.</p>"},{"location":"legacy/05_ontology_legacy/#how-do-i-add-new-terms-concepts-and-relations-to-the-oeo","title":"How do I add new terms, concepts and relations to the OEO?","text":"<p> Semantic structure of the OEO:</p> <p> Semantic structure of the OEO \u2013 Workshop:</p> <p>Get familiar with the logic and semantic structure of the OEO.</p> <p> Guiding principles for contributions:</p> <p>Learn about the guiding principles for choosing terms, creating definitions and maintaining the taxonomy of the OEO.</p> <p> Workflow and checklists - overview:</p> <p>Get an overview on all the necessary steps for contribution.</p> <p> Implementing workflow:</p> <p>Get to know the steps you have to follow when implementing concepts, terms, or their relations to the OEO.</p> <p> Handling ambiguous terms:</p> <p>Learn how to deal with ambiguous terms on the OEO.</p>"},{"location":"legacy/05_ontology_legacy/#where-do-i-get-help-if-got-stuck","title":"Where do I get help, if got stuck?","text":"<p> Tutorials on special topics:</p> <p>Search for topics, that are not addressed in this capacity building module.</p> <p> Contact form:</p> <p>Use the contact form of the Open Energy Platform to get in touch with us.</p>"},{"location":"legacy/05_ontology_legacy/#supplementary-material-and-further-readings","title":"Supplementary material and further readings","text":"<p> Introducing the Open Energy Ontology: Enhancing data interpretation and interfacing in energy systems analysis (scientific paper):</p> <p>Learn about the concepts behind the OEO (external link).</p> <p> Explore helpful resources on ontologies and the OEO (external links):</p> <ul> <li>GitHub's Getting Started page</li> <li>Prot\u00e9g\u00e9's user guides</li> <li>BOOKS:</li> <li>Arp, Smith and Spear (2015) Building Ontologies with Basic Formal Ontology</li> <li>Keet (2018), Introduction to Ontology Engineering</li> <li>The classic Manchester tutorial on OWL and Prot\u00e9g\u00e9</li> <li>BFO and ontologies tutorial by Barry Smith</li> </ul>"},{"location":"legacy/05_ontology_legacy/#about-this-course","title":"About this course","text":"<ul> <li>Authors: Ulf Mueller, Mirjam Stappel, Hannah F\u00f6rster, Christian Winger</li> <li>Copyright: Fraunhofer IEE, Otto-von-Guericke-Universit\u00e4t, \u00d6ko-Institut</li> <li>Contact: SIROP@iee.fraunhofer.de. License: CC BY 4.0</li> <li>Attribution: Fraunhofer IEE, Otto-von-Guericke-Universit\u00e4t, \u00d6ko-Institut (2023): Contribute to the OEO. Last update: 2024-10-21</li> <li>You can provide feedback to this course on GitHub: https://github.com/OpenEnergyPlatform/academy/issues/167</li> </ul>"},{"location":"legacy/OEP_Upload_Process_Data_and_Metadata_oem2orm/","title":"Tutorial - How to Upload Your Data and Metadata using OE Metadata","text":"In\u00a0[\u00a0]: Copied! <pre>from oem2orm import oep_oedialect_oem2orm as oem2orm\nimport os\nimport pandas as pd\nimport getpass\n</pre> from oem2orm import oep_oedialect_oem2orm as oem2orm import os import pandas as pd import getpass In\u00a0[\u00a0]: Copied! <pre>oem2orm.setup_logger()\n</pre> oem2orm.setup_logger() In\u00a0[\u00a0]: Copied! <pre>os.environ[\"OEP_API_TOKEN\"] = getpass.getpass('Token:')\n</pre> os.environ[\"OEP_API_TOKEN\"] = getpass.getpass('Token:') <p>Provide your OEP-username to oem2orm in order to create a connection to the database. Your token is taken from the environment variable you've created above. Note: Using white space in your name is fine.</p> In\u00a0[\u00a0]: Copied! <pre>db = oem2orm.setup_db_connection()\n</pre> db = oem2orm.setup_db_connection() In\u00a0[\u00a0]: Copied! <pre>metadata_folder = oem2orm.select_oem_dir(oem_folder_name=\"metadata\")\n</pre> metadata_folder = oem2orm.select_oem_dir(oem_folder_name=\"metadata\") <p>The next command will set up the table. The collect_tables_function collects all metadata files in a folder and retrives the SQLAlchemy ORM objects and returns them. The Tables are ordered by foreign key. Having a valid metadata strings is necessary for the following steps.</p>  INFO: The red output is information printed by the logger. It does not mean that an error has occurred. In\u00a0[\u00a0]: Copied! <pre>tables_orm = oem2orm.collect_tables_from_oem(db, metadata_folder)\n</pre> tables_orm = oem2orm.collect_tables_from_oem(db, metadata_folder) <p>Now we can use create our table objects in the database.</p> In\u00a0[\u00a0]: Copied! <pre>#create table\noem2orm.create_tables(db, tables_orm)\n</pre> #create table oem2orm.create_tables(db, tables_orm) <p>The tables should now be public, but empty on the OEP at the location provided in the metadata file. For this example tutorial, the created table is located in model_draft.upload_tutorial_example_data. If you've just been playing around and don't want to write any data to the OEP, please make sure to delete your tables again.</p> In\u00a0[\u00a0]: Copied! <pre># In order to actually delete, you will need to type: yes\noem2orm.delete_tables(db, tables_orm)\n</pre> # In order to actually delete, you will need to type: yes oem2orm.delete_tables(db, tables_orm) In\u00a0[\u00a0]: Copied! <pre># db = oem2orm.setup_db_connection()\n\nfilepath = \"./data/upload_tutorial_example_data.csv\"\nexample_df = pd.read_csv(filepath, encoding='utf8', sep=';')\n\n# show the first 10 row\u00b4s\nexample_df[:10]\n</pre> # db = oem2orm.setup_db_connection()  filepath = \"./data/upload_tutorial_example_data.csv\" example_df = pd.read_csv(filepath, encoding='utf8', sep=';')  # show the first 10 row\u00b4s example_df[:10] <p>We need to define the location in the OEDB where the data should be written to. The connection information is still available from our steps above.</p> In\u00a0[\u00a0]: Copied! <pre># change to the table schema\nschema = \"sandbox\"\n# change to the table name\ntable_name = \"upload_tutorial_example_data\"\nconnection = db.engine\n</pre> # change to the table schema schema = \"sandbox\" # change to the table name table_name = \"upload_tutorial_example_data\" connection = db.engine <p>The following command will write the content of your dataframe to the table on the OEP that was created earlier.  The table is uploaded in chunks to ensure a stable connection to the OEP when uploading large tables. Take a look at your table on the OEP after succesfull upload or for debugging in case of an exception!</p> In\u00a0[\u00a0]: Copied! <pre># Define chunksize. The chunksize defines the number of uploaded csv-rows per request.\nchunksize = 6000\n\nwith pd.read_csv(filepath, encoding='utf8', sep=';', chunksize=chunksize) as reader:\n    for chunk in reader:\n        print(f'Uploading chunk from table: {table_name}.')\n        try: \n            chunk.to_sql(table_name, connection, schema=schema, if_exists='append', index=False)\n            print(f'Appended {len(chunk)} rows to table on OEP')\n        except Exception as e:\n            print(f'Writing to {schema}.{table_name} failed!')\n            print('Delete and recreate with the commands above, if you want to repeat your upload again.')\n            print('The program throws the following exception:')\n            print(e)\n        finally:\n            print(f'Take a look at your table on the OEP: https://openenergyplatform.org/dataedit/view/{schema}/{table_name}')\n</pre> # Define chunksize. The chunksize defines the number of uploaded csv-rows per request. chunksize = 6000  with pd.read_csv(filepath, encoding='utf8', sep=';', chunksize=chunksize) as reader:     for chunk in reader:         print(f'Uploading chunk from table: {table_name}.')         try:              chunk.to_sql(table_name, connection, schema=schema, if_exists='append', index=False)             print(f'Appended {len(chunk)} rows to table on OEP')         except Exception as e:             print(f'Writing to {schema}.{table_name} failed!')             print('Delete and recreate with the commands above, if you want to repeat your upload again.')             print('The program throws the following exception:')             print(e)         finally:             print(f'Take a look at your table on the OEP: https://openenergyplatform.org/dataedit/view/{schema}/{table_name}') <p>Now that we have data in our table it's high time, that we attach our metadata to it. Since we're using the api, some direct http-requests and a little helper function from the oep-client, we need to import these new dependencies.</p> In\u00a0[\u00a0]: Copied! <pre>import json\nimport requests\n</pre> import json import requests <p>We use the metadata folder we set up before. (See the Creating tables section If you want to set another folder use the code below:</p> In\u00a0[\u00a0]: Copied! <pre># oem_path = oem2orm.select_oem_dir(oem_folder_name=\"metadata\")\nmd_file_name = \"example_metadata\"\n</pre> # oem_path = oem2orm.select_oem_dir(oem_folder_name=\"metadata\") md_file_name = \"example_metadata\" <p>First we're reading the metadata file into a json dictionary.</p> In\u00a0[\u00a0]: Copied! <pre>metadata = oem2orm.mdToDict(oem_folder_path=metadata_folder, file_name=md_file_name)\n</pre> metadata = oem2orm.mdToDict(oem_folder_path=metadata_folder, file_name=md_file_name) <p>Then we need to validate the metadata.</p> In\u00a0[\u00a0]: Copied! <pre>oem2orm.omi_validateMd(metadata)\n</pre> oem2orm.omi_validateMd(metadata) <p>Now we can upload the metadata.</p> In\u00a0[\u00a0]: Copied! <pre>oem2orm.api_updateMdOnTable(metadata)\n</pre> oem2orm.api_updateMdOnTable(metadata) <p>If you still have the page on the OEP with your data open, refresh it. It should now show you the metadata on its side.</p>"},{"location":"legacy/OEP_Upload_Process_Data_and_Metadata_oem2orm/#tutorial-how-to-upload-your-data-and-metadata-using-oe-metadata","title":"Tutorial - How to Upload Your Data and Metadata using OE Metadata\u00b6","text":"<p>The development of tutorials for the Open Energy Family takes place publicly in a dedicated tutorial repository. Please report bugs and suggestions as new issues. </p> <p>license: GNU Affero General Public License Version 3 (AGPL-3.0) copyright: Reiner Lemoine Institut  authors: christian-rli, jh-RLI, Ludee</p> <p>If Jupyter Notebooks are new to you and you'd like to get an introduction, have a look at this less than 10 minute introduction video. Official installation instructions are available on jupyter's readthedocs page.</p>"},{"location":"legacy/OEP_Upload_Process_Data_and_Metadata_oem2orm/#introduction","title":"Introduction\u00b6","text":"<p>This resource will go through the technical process of uploading data to the OEDB. It uses example data from a csv file and corresponding metadata to illustrate the process. In order to replicate it with your own data in a jupyter notebook, you can use this empty upload template with the same structure.</p> <p>If you need more context on the used tools and how to install them, have a look at the Upload Process Guidebook.</p>"},{"location":"legacy/OEP_Upload_Process_Data_and_Metadata_oem2orm/#setup","title":"Setup\u00b6","text":"<p>You need to be signed up to the OEP to access your username and API Token. To run this Jupyter Notebook you need to create an execution environment with all the following dependencies installed: <code>oem2orm</code>, <code>pandas==1.2.4</code>, <code>sqlalchemy==1.3.16</code>, <code>requests</code>, <code>oep_client</code>, <code>oedialect</code>.</p>"},{"location":"legacy/OEP_Upload_Process_Data_and_Metadata_oem2orm/#uploading-process","title":"Uploading Process\u00b6","text":""},{"location":"legacy/OEP_Upload_Process_Data_and_Metadata_oem2orm/#import-dependencies","title":"Import Dependencies\u00b6","text":"<p>We will start out by creating a connection to the OEP, reading in our metadata files and creating empty tables from these. For these steps we need to import oem2orm, pandas, os and getpass.</p>"},{"location":"legacy/OEP_Upload_Process_Data_and_Metadata_oem2orm/#setting-up-the-oem2orm-logger","title":"Setting up the oem2orm logger\u00b6","text":"<p>If you want to see detailed runtime information on oem2orm functions or if errors occur, you can activate the logger with this simple setup function.</p>"},{"location":"legacy/OEP_Upload_Process_Data_and_Metadata_oem2orm/#connection-to-oep","title":"Connection to OEP\u00b6","text":"<p>To connect to the OEP you need your OEP Token and user name. Note: You ca view your token on your OEP profile page after logging in. The following command will prompt you for your token and store it as an environment variable. When you paste it here, it will only show dots instead of the actual string.</p>"},{"location":"legacy/OEP_Upload_Process_Data_and_Metadata_oem2orm/#creating-sql-tables-from-oemetadata","title":"Creating sql tables from oemetadata\u00b6","text":"<p>The oemetadata format is a standardised json file format and required for all data uploaded to the OEP. It includes the data model and the used data types. This allows us to derive the necessary tables in - SQLAlchemy from it.</p> <p>In order to create the table(s) we need to tell python where to find our oemetadata file first. To do this we place them in the folder \"metadata\" which is in the current directory (Path of this jupyter notebbok). Provide the path to your own folder if you want to use your own metadata. oem2orm will process all files that are located in the folder.</p>"},{"location":"legacy/OEP_Upload_Process_Data_and_Metadata_oem2orm/#deleting-your-table","title":"Deleting your table\u00b6","text":"<p>Running the following commands will delete the tables from the database which you have in your ordered ORM. Take care that you only delete tables you actually want to have removed.</p>  Skip this command, if you want to keep your table!"},{"location":"legacy/OEP_Upload_Process_Data_and_Metadata_oem2orm/#writing-data-into-a-table","title":"Writing data into a table\u00b6","text":"<p>In this example we will upload data from a csv file. Pandas has a read_csv function which makes importing a csv-file rather comfortable. It reads csv into a DataFrame. By default, it assumes that the fields are comma-separated. Our example file has columns with semicolons as separators, so we have to specify this when reading the file.</p> <p>The example file for this tutorial ('upload_tutorial_example_data.csv') is in the 'data' directory, next to this tutorial. Make sure to adapt the path to the file you're using if your file is located elsewhere.</p>"},{"location":"legacy/OEP_Upload_Process_Data_and_Metadata_oem2orm/#writing-metadata-to-the-table","title":"Writing metadata to the table\u00b6","text":""},{"location":"legacy/OEP_Upload_Process_Data_and_Metadata_oep-client/","title":"Tutorial - How Upload Your Data and Metadata to the OEP","text":"In\u00a0[1]: Copied! <pre># pip install oem2orm pandas oedialect\n\nfrom oem2orm import oep_oedialect_oem2orm as oem2orm\nimport os\nimport pandas as pd\nimport getpass\n</pre> # pip install oem2orm pandas oedialect  from oem2orm import oep_oedialect_oem2orm as oem2orm import os import pandas as pd import getpass <pre>\n---------------------------------------------------------------------------\nModuleNotFoundError                       Traceback (most recent call last)\nCell In[1], line 1\n----&gt; 1 from oem2orm import oep_oedialect_oem2orm as oem2orm\n      2 import os\n      3 import pandas as pd\n\nModuleNotFoundError: No module named 'oem2orm'</pre> In\u00a0[\u00a0]: Copied! <pre>oem2orm.setup_logger()\n</pre> oem2orm.setup_logger() In\u00a0[\u00a0]: Copied! <pre>os.environ[\"OEP_API_TOKEN\"] = getpass.getpass('Token:')\n</pre> os.environ[\"OEP_API_TOKEN\"] = getpass.getpass('Token:') <p>Provide your OEP-username to oem2orm in order to create a connection to the database. Your token is taken from the environment variable you've created above. Note: Using white space in your name is fine.</p> In\u00a0[\u00a0]: Copied! <pre>db = oem2orm.setup_db_connection()\n</pre> db = oem2orm.setup_db_connection() In\u00a0[\u00a0]: Copied! <pre>metadata_folder = oem2orm.select_oem_dir(oem_folder_name=\"metadata\")\n</pre> metadata_folder = oem2orm.select_oem_dir(oem_folder_name=\"metadata\") <p>The next command will set up the table. The collect_tables_function collects all metadata files in a folder and retrives the SQLAlchemy ORM objects and returns them. The Tables are ordered by foreign key. Having a valid metadata strings is necessary for the following steps.</p>  INFO: The red output is information printed by the logger. It does not mean that an error has occurred. In\u00a0[\u00a0]: Copied! <pre>tables_orm = oem2orm.collect_tables_from_oem(db, metadata_folder)\n</pre> tables_orm = oem2orm.collect_tables_from_oem(db, metadata_folder) <p>Now we can use create our table objects in the database.</p> In\u00a0[\u00a0]: Copied! <pre>#create table\noem2orm.create_tables(db, tables_orm)\n</pre> #create table oem2orm.create_tables(db, tables_orm) <p>The tables should now be public, but empty on the OEP at the location provided in the metadata file. For this example tutorial, the created table is located in model_draft.upload_tutorial_example_data. If you've just been playing around and don't want to write any data to the OEP, please make sure to delete your tables again.</p> In\u00a0[\u00a0]: Copied! <pre># In order to actually delete, you will need to type: yes\noem2orm.delete_tables(db, tables_orm)\n</pre> # In order to actually delete, you will need to type: yes oem2orm.delete_tables(db, tables_orm) In\u00a0[\u00a0]: Copied! <pre># db = oem2orm.setup_db_connection()\n\nfilepath = \"./data/upload_tutorial_example_data.csv\"\nexample_df = pd.read_csv(filepath, encoding='utf8', sep=';')\n\n# show the first 10 row\u00b4s\nexample_df[:10]\n</pre> # db = oem2orm.setup_db_connection()  filepath = \"./data/upload_tutorial_example_data.csv\" example_df = pd.read_csv(filepath, encoding='utf8', sep=';')  # show the first 10 row\u00b4s example_df[:10] <p>We need to define the location in the OEDB where the data should be written to. The connection information is still available from our steps above.</p> In\u00a0[\u00a0]: Copied! <pre>schema = \"sandbox\"\ntable_name = \"upload_tutorial_example_data\"\nconnection = db.engine\n</pre> schema = \"sandbox\" table_name = \"upload_tutorial_example_data\" connection = db.engine <p>The following command will write the content of your dataframe to the table on the OEP that was created earlier. Have a look in the OEP after it ran succesfully!</p> In\u00a0[\u00a0]: Copied! <pre>try: \n    example_df.to_sql(table_name, connection, schema=schema, if_exists='append', index=False)\n    \n    print('Inserted data to ' + schema + '.' + table_name)\nexcept Exception as e:\n    # session.rollback()\n    print('Writing to ' + table_name + ' failed!')\n    print('Note that you cannot load the same data into the table twice. There will be an id conflict.')\n    print('Delete and recreate with the commands above, if you want to test your upload again.')\n</pre> try:      example_df.to_sql(table_name, connection, schema=schema, if_exists='append', index=False)          print('Inserted data to ' + schema + '.' + table_name) except Exception as e:     # session.rollback()     print('Writing to ' + table_name + ' failed!')     print('Note that you cannot load the same data into the table twice. There will be an id conflict.')     print('Delete and recreate with the commands above, if you want to test your upload again.') <p>Now that we have data in our table it's high time, that we attach our metadata to it. Since we're using the api, some direct http-requests and a little helper function from the oep-client, we need to import these new dependencies.</p> In\u00a0[\u00a0]: Copied! <pre>import json\nimport requests\nfrom oep_client import OepClient\n</pre> import json import requests from oep_client import OepClient <p>The token needs to be passed from the environment variable to the oep-client.</p> In\u00a0[\u00a0]: Copied! <pre>cl = OepClient(token=os.environ[\"OEP_API_TOKEN\"])\n</pre> cl = OepClient(token=os.environ[\"OEP_API_TOKEN\"]) <p>First we're reading the metadata file into a json dictionary.</p> In\u00a0[\u00a0]: Copied! <pre>with open('metadata/example_metadata.json') as json_file:\n    data = json.load(json_file)\n</pre> with open('metadata/example_metadata.json') as json_file:     data = json.load(json_file) In\u00a0[\u00a0]: Copied! <pre>cl.update_metadata(metadata=data)\n</pre> cl.update_metadata(metadata=data) <p>If you still have the page on the OEP with your data open, refresh it. It should now show you the metadata on its side.</p>"},{"location":"legacy/OEP_Upload_Process_Data_and_Metadata_oep-client/#tutorial-how-upload-your-data-and-metadata-to-the-oep","title":"Tutorial - How Upload Your Data and Metadata to the OEP\u00b6","text":"<p>The development of tutorials for the Open Energy Family takes place publicly in a dedicated tutorial repository. Please report bugs and suggestions as new issues. </p> <p>license: GNU Affero General Public License Version 3 (AGPL-3.0) copyright: Reiner Lemoine Institut  authors: christian-rli, jh-RLI, Ludee</p> <p>If Jupyter Notebooks are new to you and you'd like to get an introduction, have a look at this less than 10 minute introduction video. Official installation instructions are available on jupyter's readthedocs page.</p>"},{"location":"legacy/OEP_Upload_Process_Data_and_Metadata_oep-client/#introduction","title":"Introduction\u00b6","text":"<p>This resource will go through the technical process of uploading data to the OEDB. It uses example data from a csv file and corresponding metadata to illustrate the process. In order to replicate it with your own data in a jupyter notebook, you can use this empty upload template with the same structure.</p> <p>If you need more context on the used tools and how to install them, have a look at the Upload Process Guidebook.</p>"},{"location":"legacy/OEP_Upload_Process_Data_and_Metadata_oep-client/#setup","title":"Setup\u00b6","text":"<p>You need to be signed up to the OEP to access your username and API Token. To run this Jupyter Notebook you need to create an execution environment with all the following dependencies installed: <code>oem2orm</code>, <code>pandas</code>, <code>requests</code>, <code>oep_client</code>, <code>oedialect</code>.</p>"},{"location":"legacy/OEP_Upload_Process_Data_and_Metadata_oep-client/#uploading-process","title":"Uploading Process\u00b6","text":""},{"location":"legacy/OEP_Upload_Process_Data_and_Metadata_oep-client/#import-dependencies","title":"Import Dependencies\u00b6","text":"<p>We will start out by creating a connection to the OEP, reading in our metadata files and creating empty tables from these. For these steps we need to import oem2orm, pandas, os and getpass.</p>"},{"location":"legacy/OEP_Upload_Process_Data_and_Metadata_oep-client/#setting-up-the-oem2orm-logger","title":"Setting up the oem2orm logger\u00b6","text":"<p>If you want to see detailed runtime information on oem2orm functions or if errors occur, you can activate the logger with this simple setup function.</p>"},{"location":"legacy/OEP_Upload_Process_Data_and_Metadata_oep-client/#connection-to-oep","title":"Connection to OEP\u00b6","text":"<p>To connect to the OEP you need your OEP Token and user name. Note: You can view your token on your OEP profile page after logging in. The following command will prompt you for your token and store it as an environment variable. When you paste it here, it will only show dots instead of the actual string.</p>"},{"location":"legacy/OEP_Upload_Process_Data_and_Metadata_oep-client/#creating-sql-tables-from-oemetadata","title":"Creating sql tables from oemetadata\u00b6","text":"<p>The oemetadata format is a standardised json file format and required for all data uploaded to the OEP. It includes the data model and the used data types. This allows us to derive the necessary tables in sqlalchemy from it.</p> <p>In order to create the table(s) we need to tell python where to find our oemetadata file first. To do this we place them in the folder \"metadata\" which is in the current directory (Path of this jupyter notebbok). Provide the path to your own folder if you want to use your own metadata. oem2orm will process all files that are located in the folder.</p>"},{"location":"legacy/OEP_Upload_Process_Data_and_Metadata_oep-client/#deleting-your-table","title":"Deleting your table\u00b6","text":"<p>Running the following commands will delete the tables from the database which you have in your ordered ORM. Take care that you only delete tables you actually want to have removed.</p>  Skip this command, if you want to keep your table!"},{"location":"legacy/OEP_Upload_Process_Data_and_Metadata_oep-client/#writing-data-into-a-table","title":"Writing data into a table\u00b6","text":"<p>In this example we will upload data from a csv file. Pandas has a read_csv function which makes importing a csv-file rather comfortable. It reads csv into a DataFrame. By default, it assumes that the fields are comma-separated. Our example file has columns with semicolons as separators, so we have to specify this when reading the file.</p> <p>The example file for this tutorial ('upload_tutorial_example_data.csv') is in the 'data' directory, next to this tutorial. Make sure to adapt the path to the file you're using if your file is located elsewhere.</p>"},{"location":"legacy/OEP_Upload_Process_Data_and_Metadata_oep-client/#writing-metadata-to-the-table","title":"Writing metadata to the table\u00b6","text":""},{"location":"tutorials/","title":"Tutorials","text":"<p>Our tutorials are relatively short materials which dive right into a very specific topic.</p> <p>Browse the titles on the left, where you find the list of tutorials structured according to specific topics (such as upload, download, API, etc.).</p> <p>Click the one you are interested in and it will load here.</p> <p>If you are interested in a collection of information regarding a specific topic, we recommend you to check out our courses.</p>"},{"location":"tutorials/01_api/01_api_download/","title":"API Tutorial 01 - Download data from the Open Energy Platform using the API","text":"In\u00a0[1]: Copied! <pre># install required packages with: pip install requests\n# import required packages\nimport json\n\nimport requests as req\n\n# TODO: explain schema/topic/sandbox\n# TODO: explain randint\n\ntopic = \"model_draft\"\ntable = \"tutorial_example_table\"\ntable_api_url = f\"https://openenergyplatform.org/api/v0/schema/{topic}/tables/{table}/\"\ntable_web_url = f\"https://openenergyplatform.org/dataedit/view/{topic}/{table}\"\n\nprint(f\"you can see the table in your browser here: {table_web_url}\")\n</pre> # install required packages with: pip install requests # import required packages import json  import requests as req  # TODO: explain schema/topic/sandbox # TODO: explain randint  topic = \"model_draft\" table = \"tutorial_example_table\" table_api_url = f\"https://openenergyplatform.org/api/v0/schema/{topic}/tables/{table}/\" table_web_url = f\"https://openenergyplatform.org/dataedit/view/{topic}/{table}\"  print(f\"you can see the table in your browser here: {table_web_url}\") <pre>you can see the table in your browser here: https://openenergyplatform.org/dataedit/view/model_draft/tutorial_example_table\n</pre> In\u00a0[2]: Copied! <pre>res = req.get(table_api_url + \"rows/\")\ndata = res.json()\n\n# show results in notebook\nprint(json.dumps(data, indent=4))\n</pre> res = req.get(table_api_url + \"rows/\") data = res.json()  # show results in notebook print(json.dumps(data, indent=4)) <pre>[\n    {\n        \"id\": 1,\n        \"name\": \"unit1\",\n        \"is_active\": true,\n        \"capacity_mw\": 1.2,\n        \"installation_datetime_utc\": \"2010-02-03T00:00:00\",\n        \"location\": \"01010000008FC2F5285C8F4A40713D0AD7A3B02040\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"unit2\",\n        \"is_active\": false,\n        \"capacity_mw\": 2.1,\n        \"installation_datetime_utc\": \"2010-01-08T00:00:00\",\n        \"location\": null\n    },\n    {\n        \"id\": 3,\n        \"name\": \"unit3\",\n        \"is_active\": true,\n        \"capacity_mw\": 100.0,\n        \"installation_datetime_utc\": \"2010-01-02T10:30:00\",\n        \"location\": \"0101000000EC51B81E85AB4B405C8FC2F5285C1D40\"\n    }\n]\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[3]: Copied! <pre>from shapely import wkb\nfrom datetime import datetime\n\ndata_converted = []\nfor row in data:\n    row_converted = row.copy()\n    # convert datetime string to datetime object\n    row_converted[\"installation_datetime_utc\"] = datetime.strptime(\n        row_converted[\"installation_datetime_utc\"], \"%Y-%m-%dT%H:%M:%S\"\n    )\n    # convert wkb string to shapely geoemtry object\n    row_converted[\"location\"] = wkb.loads(row_converted[\"location\"])\n    data_converted.append(row_converted)\n</pre> from shapely import wkb from datetime import datetime  data_converted = [] for row in data:     row_converted = row.copy()     # convert datetime string to datetime object     row_converted[\"installation_datetime_utc\"] = datetime.strptime(         row_converted[\"installation_datetime_utc\"], \"%Y-%m-%dT%H:%M:%S\"     )     # convert wkb string to shapely geoemtry object     row_converted[\"location\"] = wkb.loads(row_converted[\"location\"])     data_converted.append(row_converted) In\u00a0[3]: Copied! <pre># Add (multiple) where filters to the url\nfilter = \"where=is_active=true&amp;where=capacity_mw&gt;10\"\n\nres = req.get(table_api_url + f\"rows/?{filter}\")\ndata = res.json()\n\n# show results in notebook\nprint(json.dumps(data, indent=4))\n</pre> # Add (multiple) where filters to the url filter = \"where=is_active=true&amp;where=capacity_mw&gt;10\"  res = req.get(table_api_url + f\"rows/?{filter}\") data = res.json()  # show results in notebook print(json.dumps(data, indent=4)) <pre>[\n    {\n        \"id\": 3,\n        \"name\": \"unit3\",\n        \"is_active\": true,\n        \"capacity_mw\": 100.0,\n        \"installation_datetime_utc\": \"2010-01-02T10:30:00\",\n        \"location\": \"0101000000EC51B81E85AB4B405C8FC2F5285C1D40\"\n    }\n]\n</pre> In\u00a0[4]: Copied! <pre>res = req.get(table_api_url + \"meta/\")\nmetadata = res.json()\n\n# show (partial) results in notebook\nprint(json.dumps(metadata, indent=4))\n</pre> res = req.get(table_api_url + \"meta/\") metadata = res.json()  # show (partial) results in notebook print(json.dumps(metadata, indent=4)) <pre>{\n    \"id\": \"test_table\",\n    \"_comment\": {\n        \"null\": \"If not applicable use: null\",\n        \"todo\": \"If a value is not yet available, use: todo\",\n        \"dates\": \"Dates and time must follow the ISO8601 including time zone (YYYY-MM-DD or YYYY-MM-DDThh:mm:ss\\u00b1hh)\",\n        \"units\": \"Use a space between numbers and units (100 m)\",\n        \"review\": \"Following the OEP Data Review (https://github.com/OpenEnergyPlatform/data-preprocessing/blob/master/data-review/manual/review_manual.md)\",\n        \"licenses\": \"License name must follow the SPDX License List (https://spdx.org/licenses/)\",\n        \"metadata\": \"Metadata documentation and explanation (https://github.com/OpenEnergyPlatform/oemetadata)\",\n        \"languages\": \"Languages must follow the IETF (BCP47) format (en-GB, en-US, de-DE)\"\n    },\n    \"keywords\": [\n        \"energy\",\n        \"installations\",\n        \"geo\"\n    ],\n    \"resources\": [\n        {\n            \"name\": \"test_table\",\n            \"schema\": {\n                \"fields\": [\n                    {\n                        \"name\": \"id\",\n                        \"type\": \"integer\",\n                        \"description\": \"numerical id of this data point\"\n                    },\n                    {\n                        \"name\": \"name\",\n                        \"type\": \"string\",\n                        \"description\": \"name of installation\"\n                    },\n                    {\n                        \"name\": \"is_active\",\n                        \"type\": \"boolean\",\n                        \"description\": \"true/false if installation is active\"\n                    },\n                    {\n                        \"name\": \"capacity_mw\",\n                        \"type\": \"number\",\n                        \"description\": \"installed capacity in MW\"\n                    },\n                    {\n                        \"name\": \"installation_datetime_utc\",\n                        \"type\": \"string\",\n                        \"description\": \"date (and time) when installation was build\"\n                    },\n                    {\n                        \"name\": \"location\",\n                        \"type\": \"geojson\",\n                        \"description\": \"point location of installation\"\n                    }\n                ],\n                \"foreignKeys\": []\n            }\n        }\n    ],\n    \"metaMetadata\": {\n        \"metadataLicense\": {\n            \"name\": \"CC0-1.0\",\n            \"path\": \"https://creativecommons.org/publicdomain/zero/1.0/\",\n            \"title\": \"Creative Commons Zero v1.0 Universal\"\n        },\n        \"metadataVersion\": \"OEP-1.5.2\"\n    }\n}\n</pre>"},{"location":"tutorials/01_api/01_api_download/#api-tutorial-01-download-data-from-the-open-energy-platform-using-the-api","title":"API Tutorial 01 - Download data from the Open Energy Platform using the API\u00b6","text":""},{"location":"tutorials/01_api/01_api_download/#learnings","title":"Learnings\u00b6","text":"<p>This tutorials will enable you to:</p> <ul> <li>Download data</li> <li>Download filtered data</li> <li>Download metadata</li> </ul>"},{"location":"tutorials/01_api/01_api_download/#requirements","title":"Requirements\u00b6","text":"<ul> <li>Python</li> <li>Python packages:<ul> <li><code>requests</code> (See the packages documentation for more help)</li> <li>jupyter notebook, e.g. <code>notebook</code> or <code>jupyterlab</code></li> <li><code>shapely</code> (only for geometry data conversion)</li> </ul> </li> <li>Skills:<ul> <li>use python with jupyter notebooks</li> <li>some understanding of JSON encoded data</li> </ul> </li> <li>Internet: obviously, but also make sure your network settings allow https traffic from python</li> </ul>"},{"location":"tutorials/01_api/01_api_download/#feedback","title":"Feedback\u00b6","text":"<p>You can provide feedback on this tutorial in this GitHub issue</p>"},{"location":"tutorials/01_api/01_api_download/#setup","title":"Setup\u00b6","text":""},{"location":"tutorials/01_api/01_api_download/#download-data","title":"Download data\u00b6","text":"<p>requires execution of setup</p>"},{"location":"tutorials/01_api/01_api_download/#notes-on-data-types","title":"Notes on data types\u00b6","text":"<p>The api returns json serializable data, which is only bool, numerical, or string. In the example, the value of <code>installation_datetime_utc</code> is a string representation of a datetime object, the value of <code>location</code> a WKB string representation of a geometry object.</p> <p>Depending on the use case, the data needs to be converted after the download</p>"},{"location":"tutorials/01_api/01_api_download/#download-filtered-data","title":"Download filtered data\u00b6","text":"<ul> <li>requires execution of setup</li> <li>read more about query strings</li> </ul>"},{"location":"tutorials/01_api/01_api_download/#download-metadata","title":"Download metadata\u00b6","text":"<p>requires execution of setup</p>"},{"location":"tutorials/01_api/01_api_download/#about-this-tutorial","title":"About this tutorial\u00b6","text":"<ul> <li>Author: Christian Winger</li> <li>Copyright: \u00d6ko-Institut (2024)</li> <li>License: CC BY 4.0</li> <li>Attribution: \u00d6ko-Institut (2024): API Tutorial 01- Download data from the Open Energy Platform using the API.</li> <li>Last update 2024-10-21</li> </ul>"},{"location":"tutorials/01_api/02_api_upload/","title":"API Tutorial 02 - Upload data to the Open Energy Platform using the API","text":"In\u00a0[1]: Copied! <pre># install required packages with: pip install requests\n# import required packages\nimport json\nfrom random import randint\nfrom getpass import getpass\nfrom os import environ\n\nimport requests as req\n\ntopic = \"sandbox\"\ntable = f\"tutorial_example_table_{randint(0, 100000)}\"\ntoken = environ.get(\"OEP_API_TOKEN\") or getpass(\"Enter your OEP API token:\")\n\n# for read/write, we need to add authorization header\nauth_headers = {\"Authorization\": \"Token %s\" % token}\ntable_api_url = f\"https://openenergyplatform.org/api/v0/schema/{topic}/tables/{table}/\"\n\nprint(table_api_url)\n</pre> # install required packages with: pip install requests # import required packages import json from random import randint from getpass import getpass from os import environ  import requests as req  topic = \"sandbox\" table = f\"tutorial_example_table_{randint(0, 100000)}\" token = environ.get(\"OEP_API_TOKEN\") or getpass(\"Enter your OEP API token:\")  # for read/write, we need to add authorization header auth_headers = {\"Authorization\": \"Token %s\" % token} table_api_url = f\"https://openenergyplatform.org/api/v0/schema/{topic}/tables/{table}/\"  print(table_api_url) <pre>https://openenergyplatform.org/api/v0/schema/sandbox/tables/tutorial_example_table_61248/\n</pre> In\u00a0[2]: Copied! <pre># TODO: explain / link to data types\ntable_schema = {\n    \"columns\": [\n        # NOTE: first column should be numerical column named `id` .\n        # Use `bigserial` if you want the database to create the re\n        {\"name\": \"id\", \"data_type\": \"bigserial\", \"primary_key\": True},\n        {\"name\": \"name\", \"data_type\": \"varchar(18)\", \"is_nullable\": False},\n        {\"name\": \"is_active\", \"data_type\": \"boolean\"},\n        {\"name\": \"capacity_mw\", \"data_type\": \"float\"},\n        {\"name\": \"installation_datetime_utc\", \"data_type\": \"datetime\"},\n        {\"name\": \"location\", \"data_type\": \"geometry\"},\n    ]\n}\n</pre> # TODO: explain / link to data types table_schema = {     \"columns\": [         # NOTE: first column should be numerical column named `id` .         # Use `bigserial` if you want the database to create the re         {\"name\": \"id\", \"data_type\": \"bigserial\", \"primary_key\": True},         {\"name\": \"name\", \"data_type\": \"varchar(18)\", \"is_nullable\": False},         {\"name\": \"is_active\", \"data_type\": \"boolean\"},         {\"name\": \"capacity_mw\", \"data_type\": \"float\"},         {\"name\": \"installation_datetime_utc\", \"data_type\": \"datetime\"},         {\"name\": \"location\", \"data_type\": \"geometry\"},     ] } In\u00a0[10]: Copied! <pre># Creating table needs authentication headers\n# Creating table needs table schema json data\nres = req.put(table_api_url, json={\"query\": table_schema}, headers=auth_headers)\n\n# raise Exception if request fails\nif not res.ok:\n    raise Exception(res.text)\n\n\n# NOTE: in the sandbox, this link will not work:\nprint(\n    f\"you can see the data on the platform here: https://openenergyplatform.org/dataedit/view/{topic}/{table}\"\n)\n</pre> # Creating table needs authentication headers # Creating table needs table schema json data res = req.put(table_api_url, json={\"query\": table_schema}, headers=auth_headers)  # raise Exception if request fails if not res.ok:     raise Exception(res.text)   # NOTE: in the sandbox, this link will not work: print(     f\"you can see the data on the platform here: https://openenergyplatform.org/dataedit/view/{topic}/{table}\" ) <pre>you can see the data on the platform here: https://openenergyplatform.org/dataedit/view/sandbox/tutorial_example_table_61248\n</pre> In\u00a0[4]: Copied! <pre># TODO: explain required data structure\n\n# get example data\ndata = req.get(\n    \"https://raw.githubusercontent.com/OpenEnergyPlatform/academy/production/docs/data/tutorial_example_table.data.json\"\n).json()\n\n# show results in notebook\nprint(json.dumps(data, indent=4))\n</pre> # TODO: explain required data structure  # get example data data = req.get(     \"https://raw.githubusercontent.com/OpenEnergyPlatform/academy/production/docs/data/tutorial_example_table.data.json\" ).json()  # show results in notebook print(json.dumps(data, indent=4)) <pre>[\n    {\n        \"name\": \"unit1\",\n        \"is_active\": true,\n        \"capacity_mw\": 1.2,\n        \"installation_datetime_utc\": \"2010-02-03 00:00:00\",\n        \"location\": \"POINT(53.12 8.345)\"\n    },\n    {\n        \"name\": \"unit2\",\n        \"is_active\": false,\n        \"capacity_mw\": 2.1,\n        \"installation_datetime_utc\": \"2010-01-08\",\n        \"location\": null\n    },\n    {\n        \"name\": \"unit3\",\n        \"is_active\": true,\n        \"capacity_mw\": 100.0,\n        \"installation_datetime_utc\": \"2010-01-02 10:30:00\",\n        \"location\": \"Point(55.34 7.34)\"\n    }\n]\n</pre> In\u00a0[5]: Copied! <pre># Upload data needs authentication headers\n# Upload data needs data records in json query\nres = req.post(table_api_url + \"rows/new\", json={\"query\": data}, headers=auth_headers)\n\n# raise Exception if request fails\nif not res.ok:\n    raise Exception(res.text)\n\n# TODO: maybe batches, append, not overwrite existing\n</pre> # Upload data needs authentication headers # Upload data needs data records in json query res = req.post(table_api_url + \"rows/new\", json={\"query\": data}, headers=auth_headers)  # raise Exception if request fails if not res.ok:     raise Exception(res.text)  # TODO: maybe batches, append, not overwrite existing In\u00a0[6]: Copied! <pre># example of data conversion\nfrom datetime import datetime\nfrom shapely import Point, wkt\n\nexample_row = {\n    \"name\": \"unit1\",\n    \"is_active\": True,\n    \"capacity_mw\": 1.2,\n    \"installation_datetime_utc\": datetime(2010, 2, 3),\n    \"location\": Point(53.12, 8.345),\n}\n\nconverted_data_row = example_row.copy()\n# convert datetime object to datetime string\nconverted_data_row[\"installation_datetime_utc\"] = converted_data_row[\n    \"installation_datetime_utc\"\n].strftime(\"%Y-%m-%dT%H:%M:%S\")\n# convert shapely geoemtry object to wkt string\nconverted_data_row[\"location\"] = wkt.dumps(converted_data_row[\"location\"])\n\n# show results in notebook\nprint(json.dumps(converted_data_row, indent=4))\n</pre> # example of data conversion from datetime import datetime from shapely import Point, wkt  example_row = {     \"name\": \"unit1\",     \"is_active\": True,     \"capacity_mw\": 1.2,     \"installation_datetime_utc\": datetime(2010, 2, 3),     \"location\": Point(53.12, 8.345), }  converted_data_row = example_row.copy() # convert datetime object to datetime string converted_data_row[\"installation_datetime_utc\"] = converted_data_row[     \"installation_datetime_utc\" ].strftime(\"%Y-%m-%dT%H:%M:%S\") # convert shapely geoemtry object to wkt string converted_data_row[\"location\"] = wkt.dumps(converted_data_row[\"location\"])  # show results in notebook print(json.dumps(converted_data_row, indent=4)) <pre>{\n    \"name\": \"unit1\",\n    \"is_active\": true,\n    \"capacity_mw\": 1.2,\n    \"installation_datetime_utc\": \"2010-02-03T00:00:00\",\n    \"location\": \"POINT (53.1199999999999974 8.3450000000000006)\"\n}\n</pre> In\u00a0[7]: Copied! <pre># get metadata (from example file)\nmetadata = req.get(\n    \"https://raw.githubusercontent.com/OpenEnergyPlatform/academy/production/docs/data/tutorial_example_table.metadata.json\"\n).json()\n\n# show results in notebook\nprint(json.dumps(metadata, indent=4))\n</pre> # get metadata (from example file) metadata = req.get(     \"https://raw.githubusercontent.com/OpenEnergyPlatform/academy/production/docs/data/tutorial_example_table.metadata.json\" ).json()  # show results in notebook print(json.dumps(metadata, indent=4)) <pre>{\n    \"id\": \"test_table\",\n    \"keywords\": [\n        \"energy\",\n        \"installations\",\n        \"geo\"\n    ],\n    \"languages\": [\n        \"EN\"\n    ],\n    \"resources\": [\n        {\n            \"name\": \"test_table\",\n            \"schema\": {\n                \"fields\": [\n                    {\n                        \"name\": \"id\",\n                        \"type\": \"integer\",\n                        \"data_type\": \"bigserial\",\n                        \"description\": \"numerical id of this data point\",\n                        \"primary_key\": true\n                    },\n                    {\n                        \"name\": \"name\",\n                        \"type\": \"string\",\n                        \"data_type\": \"varchar(18)\",\n                        \"description\": \"name of installation\",\n                        \"is_nullable\": false\n                    },\n                    {\n                        \"name\": \"is_active\",\n                        \"type\": \"boolean\",\n                        \"description\": \"true/false if installation is active\"\n                    },\n                    {\n                        \"name\": \"capacity_mw\",\n                        \"type\": \"number\",\n                        \"data_type\": \"float\",\n                        \"description\": \"installed capacity in MW\"\n                    },\n                    {\n                        \"name\": \"installation_datetime_utc\",\n                        \"type\": \"string\",\n                        \"data_type\": \"datetime\",\n                        \"description\": \"date (and time) when installation was build\"\n                    },\n                    {\n                        \"name\": \"location\",\n                        \"type\": \"geojson\",\n                        \"data_type\": \"geometry\",\n                        \"description\": \"point location of installation\"\n                    }\n                ]\n            }\n        }\n    ]\n}\n</pre> In\u00a0[8]: Copied! <pre># Upload metadata needs authentication headers\n# Upload metadata needs metadata json\nres = req.post(table_api_url + \"meta/\", json=metadata, headers=auth_headers)\n\n# raise Exception if request fails\nif not res.ok:\n    raise Exception(res.text)\n</pre> # Upload metadata needs authentication headers # Upload metadata needs metadata json res = req.post(table_api_url + \"meta/\", json=metadata, headers=auth_headers)  # raise Exception if request fails if not res.ok:     raise Exception(res.text) In\u00a0[9]: Copied! <pre># Deleting tables needs authentication headers\nres = req.delete(table_api_url, headers=auth_headers)\n\n# raise Exception if request fails\nif not res.ok:\n    raise Exception(res.text)\n</pre> # Deleting tables needs authentication headers res = req.delete(table_api_url, headers=auth_headers)  # raise Exception if request fails if not res.ok:     raise Exception(res.text)"},{"location":"tutorials/01_api/02_api_upload/#api-tutorial-02-upload-data-to-the-open-energy-platform-using-the-api","title":"API Tutorial 02 - Upload data to the Open Energy Platform using the API\u00b6","text":""},{"location":"tutorials/01_api/02_api_upload/#learnings","title":"Learnings\u00b6","text":"<p>This tutorials will enable you to:</p> <ul> <li>Create a table on the OEP</li> <li>Upload data to that table</li> <li>Upload metadata accompanying the data</li> <li>Delete the table and the corresponding metadata</li> </ul>"},{"location":"tutorials/01_api/02_api_upload/#requirements","title":"Requirements\u00b6","text":"<ul> <li>have your OEP API token at hand. You find this in settings tab in your profile page. (If you don't have a token see Things you only need to do once.)</li> <li>Python</li> <li>Python packages:<ul> <li><code>requests</code> (See the packages documentation for more help)</li> <li>jupyter notebook, e.g. <code>notebook</code> or <code>jupyterlab</code></li> <li><code>shapely</code> (only for geometry data conversion)</li> </ul> </li> <li>Skills:<ul> <li>use python with jupyter notebooks</li> <li>some understanding of JSON encoded data</li> </ul> </li> <li>Internet: obviously, but also make sure your network settings allow https traffic from python</li> </ul>"},{"location":"tutorials/01_api/02_api_upload/#feedback","title":"Feedback\u00b6","text":"<p>You can provide feedback on this tutorial in this GitHub issue</p>"},{"location":"tutorials/01_api/02_api_upload/#setup","title":"Setup\u00b6","text":"<p>This part of the code sets up all you need to execute the further code below. It imports the required packages into python, sets up the test table and asks you for the OEP API token so that you can identify with the OEP, which is mandatory if you want to upload to the OEP. The setup is a necessary step.</p>"},{"location":"tutorials/01_api/02_api_upload/#create-table","title":"Create table\u00b6","text":"<p>This part of the code creates the table you will later upload to the OEP.</p> <p>To be able to execute this part you will need to have executed the setup</p>"},{"location":"tutorials/01_api/02_api_upload/#upload-data","title":"Upload data\u00b6","text":"<p>This part of the code uploads the table that you have created above to the OEP.</p> <p>To be able to execute this part you will need to have executed the setup and you will need to have created a table.</p>"},{"location":"tutorials/01_api/02_api_upload/#notes-on-data-types","title":"Notes on data types\u00b6","text":"<p>The api expects json serializable data, which is only bool, numerical, or string. In the example, the value of <code>installation_datetime_utc</code> is a string representation of a datetime object, the value of <code>location</code> a WKB string representation of a geometry object.</p> <p>Depending on the use case, the data needs to be converted before upload</p>"},{"location":"tutorials/01_api/02_api_upload/#upload-metadata","title":"Upload metadata\u00b6","text":"<p>This part of the code will upload metadata that described the data in your table to the OEP.</p> <p>To be able to execute this part you will need to have executed the setup and you will need to have created a table.</p>"},{"location":"tutorials/01_api/02_api_upload/#delete-table","title":"Delete table\u00b6","text":"<p>This part of the code deletes the table (including the metadata) that you have uploaded to the OEP.</p> <p>To be able to execute this part you will need to have executed the setup and you will need to have created a table.</p>"},{"location":"tutorials/01_api/02_api_upload/#about-this-tutorial","title":"About this tutorial\u00b6","text":"<ul> <li>Author: Christian Winger</li> <li>Copyright: \u00d6ko-Institut (2024)</li> <li>License: CC BY 4.0</li> <li>Attribution: \u00d6ko-Institut (2024): API Tutorial 02 - Upload data to the Open Energy Platform using the API.</li> <li>Last update 2024-10-21</li> </ul>"},{"location":"tutorials/01_api/03_api_publish/","title":"API Tutorial 03 - Publish data to the Open Energy Platform using the API.","text":"In\u00a0[5]: Copied! <pre># install required packages with: pip install requests\n# import required packages\nimport json\nfrom getpass import getpass\nfrom os import environ\n\nimport requests as req\n\ntopic = \"model_draft\"\ntable = f\"tutorial_example_table\"\n\npublish_in_topic = \"demand\"\ntoken = environ.get(\"OEP_API_TOKEN\") or getpass(\"Enter your OEP API token:\")\n\n# for read/write, we need to add authorization header\nauth_headers = {\"Authorization\": \"Token %s\" % token}\ntable_publish_api_url = f\"https://openenergyplatform.org/api/v0/schema/{topic}/tables/{table}/move_publish/{publish_in_topic}/\"\ntable_undo_publish_api_url = f\"https://openenergyplatform.org/api/v0/schema/{publish_in_topic}/tables/{table}/move_publish/{topic}/\"\n\nprint(table_publish_api_url)\nprint(table_undo_publish_api_url)\n</pre> # install required packages with: pip install requests # import required packages import json from getpass import getpass from os import environ  import requests as req  topic = \"model_draft\" table = f\"tutorial_example_table\"  publish_in_topic = \"demand\" token = environ.get(\"OEP_API_TOKEN\") or getpass(\"Enter your OEP API token:\")  # for read/write, we need to add authorization header auth_headers = {\"Authorization\": \"Token %s\" % token} table_publish_api_url = f\"https://openenergyplatform.org/api/v0/schema/{topic}/tables/{table}/move_publish/{publish_in_topic}/\" table_undo_publish_api_url = f\"https://openenergyplatform.org/api/v0/schema/{publish_in_topic}/tables/{table}/move_publish/{topic}/\"  print(table_publish_api_url) print(table_undo_publish_api_url) <pre>https://openenergyplatform.org/api/v0/schema/model_draft/tables/tutorial_example_table/move_publish/demand/\nhttps://openenergyplatform.org/api/v0/schema/demand/tables/tutorial_example_table/move_publish/model_draft/\n</pre> In\u00a0[4]: Copied! <pre>embargo = {\n    \"embargo\": {\"duration\": \"6_months\"},\n    # \"embargo\": None,\n}\n</pre> embargo = {     \"embargo\": {\"duration\": \"6_months\"},     # \"embargo\": None, } In\u00a0[3]: Copied! <pre># Deleting tables needs authentication headers\nres = req.post(table_publish_api_url, json={\"query\": embargo}, headers=auth_headers)\n\n# raise Exception if request fails\nif not res.ok:\n    raise Exception(res.text)\n</pre> # Deleting tables needs authentication headers res = req.post(table_publish_api_url, json={\"query\": embargo}, headers=auth_headers)  # raise Exception if request fails if not res.ok:     raise Exception(res.text) <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[3], line 2\n      1 # Deleting tables needs authentication headers\n----&gt; 2 res = req.post(table_undo_publish_api_url, headers=auth_headers)\n      4 # raise Exception if request fails\n      5 if not res.ok:\n\nNameError: name 'table_undo_publish_api_url' is not defined</pre> In\u00a0[\u00a0]: Copied! <pre># Deleting tables needs authentication headers\nres = req.post(table_undo_publish_api_url, headers=auth_headers)\n\n# raise Exception if request fails\nif not res.ok:\n    raise Exception(res.text)\n</pre> # Deleting tables needs authentication headers res = req.post(table_undo_publish_api_url, headers=auth_headers)  # raise Exception if request fails if not res.ok:     raise Exception(res.text)"},{"location":"tutorials/01_api/03_api_publish/#api-tutorial-03-publish-data-to-the-open-energy-platform-using-the-api","title":"API Tutorial 03 - Publish data to the Open Energy Platform using the API.\u00b6","text":""},{"location":"tutorials/01_api/03_api_publish/#learnings","title":"Learnings\u00b6","text":"<p>This tutorials will enable you to:</p> <ul> <li>Publish an existing table on the OEP</li> <li>Optionally apply an embargo period</li> <li>Undo the table publishing</li> </ul>"},{"location":"tutorials/01_api/03_api_publish/#requirements","title":"Requirements\u00b6","text":"<ul> <li>have your OEP API token at hand. You find this in settings tab in your profile page. (If you don't have a token see Things you only need to do once.)</li> <li>Your tabular data is available on the open energy platform and got oemetadata including an open license (according to the SPDX data license list) in the licenses field.<ul> <li>we use the tutorial_example_table_publish from model_draft on the OEP, make sure it exists beforehand. If it is missing try to recreate it using this script TODO.</li> </ul> </li> <li>Python</li> <li>Python packages:<ul> <li><code>requests</code> (See the packages documentation for more help)</li> <li>jupyter notebook, e.g. <code>notebook</code> or <code>jupyterlab</code></li> </ul> </li> <li>Skills:<ul> <li>use python with jupyter notebooks</li> <li>some understanding of JSON encoded data</li> </ul> </li> <li>Internet: obviously, but also make sure your network settings allow https traffic from python</li> </ul>"},{"location":"tutorials/01_api/03_api_publish/#feedback","title":"Feedback\u00b6","text":"<p>You can provide feedback on this tutorial in this GitHub issue</p>"},{"location":"tutorials/01_api/03_api_publish/#setup","title":"Setup\u00b6","text":"<p>This part of the code sets up all you need to execute the further code below. It imports the required packages into python, sets up the test table and asks you for the OEP API token so that you can identify with the OEP, which is mandatory if you want to upload to the OEP. The setup is a necessary step.</p>"},{"location":"tutorials/01_api/03_api_publish/#optional-setup-an-embargo-period","title":"Optional: Setup an embargo period\u00b6","text":"<p>This part of the code will add an embargo period of either 6 months or 1 year on the published tabular dataset. Since it is also possible to apply an embargo on data that is not yet published, during table creation, this section code also shows how to remove an embargo period that is already active.</p> <p>Note: It is not possible to set a custom embargo period like embargo\": {\"start\": \"2024-08-27\", \"end\": \"2024-02-27\"} We might consider implementing such a possibility later on.</p>"},{"location":"tutorials/01_api/03_api_publish/#publish-a-table","title":"Publish a table\u00b6","text":"<p>This part of the code deletes the table (including the metadata) that you have uploaded to the OEP.</p> <p>To be able to execute this part you will need to have executed the setup and you will need to have created a table.</p>"},{"location":"tutorials/01_api/03_api_publish/#revoke-a-published-table","title":"Revoke a published table\u00b6","text":"<p>This part of the code deletes the table (including the metadata) that you have uploaded to the OEP.</p> <p>To be able to execute this part you will need to have executed the setup and you will need to have created a table.</p>"},{"location":"tutorials/01_api/03_api_publish/#about-this-tutorial","title":"About this tutorial\u00b6","text":"<ul> <li>Author: Jonas Huber</li> <li>Copyright: Reiner-Lemoine-Institut (2024)</li> <li>License: CC BY 4.0</li> <li>Attribution: Reiner-Lemoine-Institut (2024): API Tutorial 03 - Publish data to the Open Energy Platform using the API.</li> <li>Last update 2024-10-21</li> </ul>"},{"location":"tutorials/02_oep_client/01_client_python_download/","title":"OEP Client Tutorial 01 - Download data from the Open Energy Platform using the OEP Client in a python script","text":"In\u00a0[1]: Copied! <pre># install required packages with: pip install \"oep-client&gt;=0.17\"\n# import required packages\nimport json\n\nfrom oep_client import OepClient\n\ncli = OepClient()\ntable = \"tutorial_example_table\"\n</pre> # install required packages with: pip install \"oep-client&gt;=0.17\" # import required packages import json  from oep_client import OepClient  cli = OepClient() table = \"tutorial_example_table\" In\u00a0[2]: Copied! <pre>data = cli.select_from_table(table)\n\n# show results in notebook\nprint(json.dumps(data, indent=4))\n</pre> data = cli.select_from_table(table)  # show results in notebook print(json.dumps(data, indent=4)) <pre>[\n    {\n        \"id\": 1,\n        \"name\": \"unit1\",\n        \"is_active\": true,\n        \"capacity_mw\": 1.2,\n        \"installation_datetime_utc\": \"2010-02-03T00:00:00\",\n        \"location\": \"01010000008FC2F5285C8F4A40713D0AD7A3B02040\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"unit2\",\n        \"is_active\": false,\n        \"capacity_mw\": 2.1,\n        \"installation_datetime_utc\": \"2010-01-08T00:00:00\",\n        \"location\": null\n    },\n    {\n        \"id\": 3,\n        \"name\": \"unit3\",\n        \"is_active\": true,\n        \"capacity_mw\": 100.0,\n        \"installation_datetime_utc\": \"2010-01-02T10:30:00\",\n        \"location\": \"0101000000EC51B81E85AB4B405C8FC2F5285C1D40\"\n    }\n]\n</pre> In\u00a0[3]: Copied! <pre>data = cli.select_from_table(table, where=[\"is_active=true\", \"capacity_mw&gt;10\"])\n\n# show results in notebook\nprint(json.dumps(data, indent=4))\n</pre> data = cli.select_from_table(table, where=[\"is_active=true\", \"capacity_mw&gt;10\"])  # show results in notebook print(json.dumps(data, indent=4)) <pre>[\n    {\n        \"id\": 3,\n        \"name\": \"unit3\",\n        \"is_active\": true,\n        \"capacity_mw\": 100.0,\n        \"installation_datetime_utc\": \"2010-01-02T10:30:00\",\n        \"location\": \"0101000000EC51B81E85AB4B405C8FC2F5285C1D40\"\n    }\n]\n</pre> In\u00a0[4]: Copied! <pre>metadata = cli.get_metadata(table)\n\n# show results in notebook\nprint(json.dumps(metadata, indent=4))\n</pre> metadata = cli.get_metadata(table)  # show results in notebook print(json.dumps(metadata, indent=4)) <pre>{\n    \"id\": \"test_table\",\n    \"keywords\": [\n        \"energy\",\n        \"installations\",\n        \"geo\"\n    ],\n    \"resources\": [\n        {\n            \"name\": \"test_table\",\n            \"schema\": {\n                \"foreignKeys\": [],\n                \"fields\": [\n                    {\n                        \"name\": \"id\",\n                        \"description\": \"numerical id of this data point\",\n                        \"type\": \"integer\"\n                    },\n                    {\n                        \"name\": \"name\",\n                        \"description\": \"name of installation\",\n                        \"type\": \"string\"\n                    },\n                    {\n                        \"name\": \"is_active\",\n                        \"description\": \"true/false if installation is active\",\n                        \"type\": \"boolean\"\n                    },\n                    {\n                        \"name\": \"capacity_mw\",\n                        \"description\": \"installed capacity in MW\",\n                        \"type\": \"number\"\n                    },\n                    {\n                        \"name\": \"installation_datetime_utc\",\n                        \"description\": \"date (and time) when installation was build\",\n                        \"type\": \"string\"\n                    },\n                    {\n                        \"name\": \"location\",\n                        \"description\": \"point location of installation\",\n                        \"type\": \"geojson\"\n                    }\n                ]\n            }\n        }\n    ],\n    \"metaMetadata\": {\n        \"metadataVersion\": \"OEP-1.5.2\",\n        \"metadataLicense\": {\n            \"name\": \"CC0-1.0\",\n            \"title\": \"Creative Commons Zero v1.0 Universal\",\n            \"path\": \"https://creativecommons.org/publicdomain/zero/1.0/\"\n        }\n    },\n    \"_comment\": {\n        \"metadata\": \"Metadata documentation and explanation (https://github.com/OpenEnergyPlatform/oemetadata)\",\n        \"dates\": \"Dates and time must follow the ISO8601 including time zone (YYYY-MM-DD or YYYY-MM-DDThh:mm:ss\\u00b1hh)\",\n        \"units\": \"Use a space between numbers and units (100 m)\",\n        \"languages\": \"Languages must follow the IETF (BCP47) format (en-GB, en-US, de-DE)\",\n        \"licenses\": \"License name must follow the SPDX License List (https://spdx.org/licenses/)\",\n        \"review\": \"Following the OEP Data Review (https://github.com/OpenEnergyPlatform/data-preprocessing/blob/master/data-review/manual/review_manual.md)\",\n        \"null\": \"If not applicable use: null\",\n        \"todo\": \"If a value is not yet available, use: todo\"\n    }\n}\n</pre>"},{"location":"tutorials/02_oep_client/01_client_python_download/#oep-client-tutorial-01-download-data-from-the-open-energy-platform-using-the-oep-client-in-a-python-script","title":"OEP Client Tutorial 01 - Download data from the Open Energy Platform using the OEP Client in a python script\u00b6","text":""},{"location":"tutorials/02_oep_client/01_client_python_download/#learnings","title":"Learnings\u00b6","text":"<p>This tutorials will enable you to:</p> <ul> <li>Download data</li> <li>Download filtered data</li> <li>Download metadata</li> </ul>"},{"location":"tutorials/02_oep_client/01_client_python_download/#requirements","title":"Requirements\u00b6","text":"<ul> <li>Python packages:<ul> <li><code>oep-client&gt;=0.14</code> (installs also the command line tool)</li> <li>jupyter notebook, e.g. <code>notebook</code> or <code>jupyterlab</code></li> </ul> </li> <li>Skills:<ul> <li>use python with jupyter notebooks</li> </ul> </li> </ul>"},{"location":"tutorials/02_oep_client/01_client_python_download/#feedback","title":"Feedback\u00b6","text":"<p>You can provide feedback on this tutorial here: https://github.com/OpenEnergyPlatform/academy/issues/235</p>"},{"location":"tutorials/02_oep_client/01_client_python_download/#setup","title":"Setup\u00b6","text":""},{"location":"tutorials/02_oep_client/01_client_python_download/#download-data","title":"Download data\u00b6","text":"<p>requires execution of setup</p>"},{"location":"tutorials/02_oep_client/01_client_python_download/#download-filtered-data","title":"Download filtered data\u00b6","text":"<p>requires execution of setup</p>"},{"location":"tutorials/02_oep_client/01_client_python_download/#download-metadata","title":"Download metadata\u00b6","text":"<p>requires execution of setup</p>"},{"location":"tutorials/02_oep_client/01_client_python_download/#about-this-tutorial","title":"About this tutorial\u00b6","text":"<ul> <li>Author: Christian Winger</li> <li>Copyright: \u00d6ko-Institut (2024)</li> <li>License: CC BY 4.0</li> <li>Attribution: \u00d6ko-Institut (2024): OEP Client Tutorial 01 - Download data from the Open Energy Platform using the OEP Client in a python script</li> <li>Last update 2024-10-21</li> </ul>"},{"location":"tutorials/02_oep_client/02_client_python_upload/","title":"OEP Client Tutorial 02 - Upload data to the Open Energy Platform using the OEP Client in a python script","text":"In\u00a0[1]: Copied! <pre># install required packages with: pip install \"oep-client&gt;=0.17\"\n# import required packages\nimport json\nfrom random import randint\nfrom getpass import getpass\nfrom os import environ\n\nimport requests as req\nfrom oep_client import OepClient\n\ntopic = \"sandbox\"\ntable = f\"tutorial_example_table_{randint(0, 100000)}\"\ntoken = environ.get(\"OEP_API_TOKEN\") or getpass(\"Enter your OEP API token:\")\n\ncli = OepClient(token=token, default_schema=topic)\n</pre> # install required packages with: pip install \"oep-client&gt;=0.17\" # import required packages import json from random import randint from getpass import getpass from os import environ  import requests as req from oep_client import OepClient  topic = \"sandbox\" table = f\"tutorial_example_table_{randint(0, 100000)}\" token = environ.get(\"OEP_API_TOKEN\") or getpass(\"Enter your OEP API token:\")  cli = OepClient(token=token, default_schema=topic) In\u00a0[2]: Copied! <pre># TODO: explain / link to data types\ntable_schema = {\n    \"columns\": [\n        # NOTE: first column should be numerical column named `id` .\n        # Use `bigserial` if you want the database to create the re\n        {\"name\": \"id\", \"data_type\": \"bigserial\", \"primary_key\": True},\n        {\"name\": \"name\", \"data_type\": \"varchar(18)\", \"is_nullable\": False},\n        {\"name\": \"is_active\", \"data_type\": \"boolean\"},\n        {\"name\": \"capacity_mw\", \"data_type\": \"float\"},\n        {\"name\": \"installation_datetime_utc\", \"data_type\": \"datetime\"},\n        {\"name\": \"location\", \"data_type\": \"geometry\"},\n    ]\n}\n</pre> # TODO: explain / link to data types table_schema = {     \"columns\": [         # NOTE: first column should be numerical column named `id` .         # Use `bigserial` if you want the database to create the re         {\"name\": \"id\", \"data_type\": \"bigserial\", \"primary_key\": True},         {\"name\": \"name\", \"data_type\": \"varchar(18)\", \"is_nullable\": False},         {\"name\": \"is_active\", \"data_type\": \"boolean\"},         {\"name\": \"capacity_mw\", \"data_type\": \"float\"},         {\"name\": \"installation_datetime_utc\", \"data_type\": \"datetime\"},         {\"name\": \"location\", \"data_type\": \"geometry\"},     ] } In\u00a0[3]: Copied! <pre>cli.create_table(table, table_schema)\n</pre> cli.create_table(table, table_schema) Out[3]: <pre>{}</pre> In\u00a0[4]: Copied! <pre># TODO: explain required data structure\n\n# get example data\ndata = req.get(\n    \"https://raw.githubusercontent.com/OpenEnergyPlatform/academy/production/docs/data/tutorial_example_table.data.json\"\n).json()\n\n# show results in notebook\nprint(json.dumps(data, indent=4))\n</pre> # TODO: explain required data structure  # get example data data = req.get(     \"https://raw.githubusercontent.com/OpenEnergyPlatform/academy/production/docs/data/tutorial_example_table.data.json\" ).json()  # show results in notebook print(json.dumps(data, indent=4)) <pre>[\n    {\n        \"name\": \"unit1\",\n        \"is_active\": true,\n        \"capacity_mw\": 1.2,\n        \"installation_datetime_utc\": \"2010-02-03 00:00:00\",\n        \"location\": \"POINT(53.12 8.345)\"\n    },\n    {\n        \"name\": \"unit2\",\n        \"is_active\": false,\n        \"capacity_mw\": 2.1,\n        \"installation_datetime_utc\": \"2010-01-08\",\n        \"location\": null\n    },\n    {\n        \"name\": \"unit3\",\n        \"is_active\": true,\n        \"capacity_mw\": 100.0,\n        \"installation_datetime_utc\": \"2010-01-02 10:30:00\",\n        \"location\": \"Point(55.34 7.34)\"\n    }\n]\n</pre> In\u00a0[5]: Copied! <pre>cli.insert_into_table(table, data)\n</pre> cli.insert_into_table(table, data) <pre>\n</pre> In\u00a0[6]: Copied! <pre># get metadata (from example file)\nmetadata = req.get(\n    \"https://raw.githubusercontent.com/OpenEnergyPlatform/academy/production/docs/data/tutorial_example_table.metadata.json\"\n).json()\n\nmetadata = cli.set_metadata(table, metadata)\nprint(json.dumps(metadata, indent=4))\n</pre> # get metadata (from example file) metadata = req.get(     \"https://raw.githubusercontent.com/OpenEnergyPlatform/academy/production/docs/data/tutorial_example_table.metadata.json\" ).json()  metadata = cli.set_metadata(table, metadata) print(json.dumps(metadata, indent=4)) <pre>{\n    \"id\": \"test_table\",\n    \"keywords\": [\n        \"energy\",\n        \"installations\",\n        \"geo\"\n    ],\n    \"resources\": [\n        {\n            \"name\": \"test_table\",\n            \"schema\": {\n                \"foreignKeys\": [],\n                \"fields\": [\n                    {\n                        \"name\": \"id\",\n                        \"description\": \"numerical id of this data point\",\n                        \"type\": \"integer\"\n                    },\n                    {\n                        \"name\": \"name\",\n                        \"description\": \"name of installation\",\n                        \"type\": \"string\"\n                    },\n                    {\n                        \"name\": \"is_active\",\n                        \"description\": \"true/false if installation is active\",\n                        \"type\": \"boolean\"\n                    },\n                    {\n                        \"name\": \"capacity_mw\",\n                        \"description\": \"installed capacity in MW\",\n                        \"type\": \"number\"\n                    },\n                    {\n                        \"name\": \"installation_datetime_utc\",\n                        \"description\": \"date (and time) when installation was build\",\n                        \"type\": \"string\"\n                    },\n                    {\n                        \"name\": \"location\",\n                        \"description\": \"point location of installation\",\n                        \"type\": \"geojson\"\n                    }\n                ]\n            }\n        }\n    ],\n    \"metaMetadata\": {\n        \"metadataVersion\": \"OEP-1.5.2\",\n        \"metadataLicense\": {\n            \"name\": \"CC0-1.0\",\n            \"title\": \"Creative Commons Zero v1.0 Universal\",\n            \"path\": \"https://creativecommons.org/publicdomain/zero/1.0/\"\n        }\n    },\n    \"_comment\": {\n        \"metadata\": \"Metadata documentation and explanation (https://github.com/OpenEnergyPlatform/oemetadata)\",\n        \"dates\": \"Dates and time must follow the ISO8601 including time zone (YYYY-MM-DD or YYYY-MM-DDThh:mm:ss\\u00b1hh)\",\n        \"units\": \"Use a space between numbers and units (100 m)\",\n        \"languages\": \"Languages must follow the IETF (BCP47) format (en-GB, en-US, de-DE)\",\n        \"licenses\": \"License name must follow the SPDX License List (https://spdx.org/licenses/)\",\n        \"review\": \"Following the OEP Data Review (https://github.com/OpenEnergyPlatform/data-preprocessing/blob/master/data-review/manual/review_manual.md)\",\n        \"null\": \"If not applicable use: null\",\n        \"todo\": \"If a value is not yet available, use: todo\"\n    }\n}\n</pre> In\u00a0[7]: Copied! <pre>cli.drop_table(table)\n</pre> cli.drop_table(table) Out[7]: <pre>{}</pre>"},{"location":"tutorials/02_oep_client/02_client_python_upload/#oep-client-tutorial-02-upload-data-to-the-open-energy-platform-using-the-oep-client-in-a-python-script","title":"OEP Client Tutorial 02 - Upload data to the Open Energy Platform using the OEP Client in a python script\u00b6","text":""},{"location":"tutorials/02_oep_client/02_client_python_upload/#learnings","title":"Learnings\u00b6","text":"<p>This tutorials will enable you to:</p> <ul> <li>Create a table on the OEP</li> <li>Upload data to that table</li> <li>Upload metadata accompanying the data</li> <li>Delete the table and the corresponding metadata</li> </ul>"},{"location":"tutorials/02_oep_client/02_client_python_upload/#requirements","title":"Requirements\u00b6","text":"<p>To execute the following code you will need to need to be a registered user on the OEP and</p> <ul> <li>have your OEP API token at hand. You find this in settings tab in your profile page. (If you don't have a token see Things you only need to do once.)</li> </ul> <p>You will also need to have the following installed on your computer:</p> <ul> <li><p>Python</p> </li> <li><p>Python packages:</p> <ul> <li><code>oep-client&gt;=0.17</code> (installs also the command line tool)</li> <li>jupyter notebook, e.g. <code>notebook</code> or <code>jupyterlab</code></li> </ul> </li> <li><p>Ideally you exhibit the following skills:</p> <ul> <li>use python with jupyter notebooks</li> </ul> </li> </ul>"},{"location":"tutorials/02_oep_client/02_client_python_upload/#feedback","title":"Feedback\u00b6","text":"<p>You can provide feedback on this tutorial here: https://github.com/OpenEnergyPlatform/academy/issues/236</p>"},{"location":"tutorials/02_oep_client/02_client_python_upload/#setup","title":"Setup\u00b6","text":"<p>This part of the code sets up all you need to execute the further code below. It imports the required packages into python, sets up the test table and asks you for the OEP API token so that you can identify with the OEP, which is mandatory if you want to upload to the OEP. The setup is a necessary step.</p>"},{"location":"tutorials/02_oep_client/02_client_python_upload/#create-table","title":"Create table\u00b6","text":"<p>This part of the code creates the table you will later upload to the OEP.</p> <p>To be able to execute this part you will need to have executed the setup</p>"},{"location":"tutorials/02_oep_client/02_client_python_upload/#upload-data","title":"Upload data\u00b6","text":"<p>This part of the code uploads the table that you have created above to the OEP.</p> <p>To be able to execute this part you will need to have executed the setup and you will need to have created a table.</p>"},{"location":"tutorials/02_oep_client/02_client_python_upload/#upload-metadata","title":"Upload metadata\u00b6","text":"<p>This part of the code will upload metadata that described the data in your table to the OEP.</p> <p>To be able to execute this part you will need to have executed the setup and you will need to have created a table.</p>"},{"location":"tutorials/02_oep_client/02_client_python_upload/#delete-table","title":"Delete table\u00b6","text":"<p>This part of the code deletes the table (including the metadata) that you have uploaded to the OEP.</p> <p>To be able to execute this part you will need to have executed the setup and you will need to have created a table.</p>"},{"location":"tutorials/02_oep_client/02_client_python_upload/#about-this-tutorial","title":"About this tutorial\u00b6","text":"<ul> <li>Author: Christian Winger</li> <li>Copyright: \u00d6ko-Institut (2024)</li> <li>License: CC BY 4.0</li> <li>Attribution: \u00d6ko-Institut (2024): OEP Client Tutorial 02 - Upload data to the Open Energy Platform using the OEP Client in a python script</li> <li>Last update 2024-10-21</li> </ul>"},{"location":"tutorials/02_oep_client/03_client_cli_download/","title":"OEP Client Tutorial 03 - Download data from the Open Energy Platform using the OEP Client in the command line","text":""},{"location":"tutorials/02_oep_client/03_client_cli_download/#learnings","title":"Learnings","text":"<p>This tutorials will enable you to:</p> <ul> <li>Download data</li> <li>Download filtered data</li> <li>Download metadata</li> </ul>"},{"location":"tutorials/02_oep_client/03_client_cli_download/#requirements","title":"Requirements","text":"<ul> <li> <p>Python packages:</p> </li> <li> <p><code>oep-client&gt;=0.17</code> (installs also the command line tool)</p> </li> <li> <p>Skills:</p> </li> <li>use the command line</li> </ul>"},{"location":"tutorials/02_oep_client/03_client_cli_download/#feedback","title":"Feedback","text":"<p>You can provide feedback on this tutorial here: https://github.com/OpenEnergyPlatform/academy/issues/237</p>"},{"location":"tutorials/02_oep_client/03_client_cli_download/#setup","title":"Setup","text":"<ul> <li>Linux</li> </ul> <pre><code>table=tutorial_example_table\n</code></pre> <ul> <li>Windows</li> </ul> <pre><code>SET table=tutorial_example_table\n</code></pre>"},{"location":"tutorials/02_oep_client/03_client_cli_download/#help","title":"Help","text":"<p>Show available commands:</p> <pre><code>oep-client --help\n</code></pre>"},{"location":"tutorials/02_oep_client/03_client_cli_download/#download-data","title":"Download data","text":"<p>requires execution of setup</p> <ul> <li>Linux</li> </ul> <pre><code>oep-client select $table $table.data.csv\n</code></pre> <ul> <li>Windows</li> </ul> <pre><code>oep-client select %table% %table%.data.csv\n</code></pre>"},{"location":"tutorials/02_oep_client/03_client_cli_download/#download-filtered-data","title":"Download filtered data","text":"<p>In this example, we don't save the data to a file but just show results in the command line:</p> <ul> <li>Linux</li> </ul> <pre><code>oep-client select $table --where \"is_active=true\" --where \"capacity_mw&gt;10\"\n</code></pre> <ul> <li>Windows</li> </ul> <pre><code>oep-client select %table% --where \"is_active=true\" --where \"capacity_mw&gt;10\"\n</code></pre>"},{"location":"tutorials/02_oep_client/03_client_cli_download/#download-metadata","title":"Download metadata","text":"<ul> <li>Linux</li> </ul> <pre><code>oep-client metadata get $table\n</code></pre> <ul> <li>Windows</li> </ul> <pre><code>oep-client metadata get %table%\n</code></pre>"},{"location":"tutorials/02_oep_client/03_client_cli_download/#about-this-tutorial","title":"About this tutorial","text":"<ul> <li>Author: Christian Winger</li> <li>Copyright: \u00d6ko-Institut (2024)</li> <li>License: CC BY 4.0</li> <li>Attribution: \u00d6ko-Institut (2024): OEP Client Tutorial 03 - Download data from the Open Energy Platform using the OEP Client in the command line</li> <li>Last update: 2024-10-21</li> </ul>"},{"location":"tutorials/02_oep_client/04_client_cli_upload/","title":"OEP Client Tutorial 04 - Upload data to the Open Energy Platform using the OEP Client in the command line","text":""},{"location":"tutorials/02_oep_client/04_client_cli_upload/#learnings","title":"Learnings","text":"<p>This tutorials will enable you to:</p> <ul> <li>Create a table on the OEP</li> <li>Upload data to that table</li> <li>Upload metadata accompanying the data</li> <li>Delete the table and the corresponding metadata</li> </ul>"},{"location":"tutorials/02_oep_client/04_client_cli_upload/#requirements","title":"Requirements","text":"<p>To execute the following code you will need to be a registered user on the OEP and   - have your OEP API token at hand. You find this in settings tab in your profile page. (If you don't have a token see Things you only need to do once.)   - Set the OEP_API_TOKEN env.variable to your token: (OEP_API_TOKEN='your token')</p> <ul> <li> <p>Python packages:</p> </li> <li> <p><code>oep-client&gt;=0.17</code> (installs also the command line tool)</p> </li> <li> <p>Skills:</p> </li> <li>use the command line</li> </ul>"},{"location":"tutorials/02_oep_client/04_client_cli_upload/#feedback","title":"Feedback","text":"<p>You can provide feedback on this tutorial here: https://github.com/OpenEnergyPlatform/academy/issues/238</p>"},{"location":"tutorials/02_oep_client/04_client_cli_upload/#setup","title":"Setup","text":"<p>For the setup commands to work, you need to set your personal OEP API token as an environment variable. Alternatively, you can assign your token directly to the token variable. You can find the token on your OEP profile page.</p> <ul> <li>Linux</li> </ul> <pre><code>token=$OEP_API_TOKEN\ntable=tutorial_example_table_$RANDOM\ntopic=sandbox\nexample_data=https://raw.githubusercontent.com/OpenEnergyPlatform/academy/production/docs/data/tutorial_example_table.data.csv\nexample_metadata=https://raw.githubusercontent.com/OpenEnergyPlatform/academy/production/docs/data/tutorial_example_table.metadata.json\n</code></pre> <ul> <li>Windows</li> </ul> <pre><code>SET token=%OEP_API_TOKEN%\nSET table=tutorial_example_table_%RANDOM%\nSET topic=sandbox\nSET example_data=https://raw.githubusercontent.com/OpenEnergyPlatform/academy/production/docs/data/tutorial_example_table.data.csv\nSET example_metadata=https://raw.githubusercontent.com/OpenEnergyPlatform/academy/production/docs/data/tutorial_example_table.metadata.json\n</code></pre>"},{"location":"tutorials/02_oep_client/04_client_cli_upload/#help","title":"Help","text":"<p>Show available commands:</p> <pre><code>oep-client --help\n</code></pre>"},{"location":"tutorials/02_oep_client/04_client_cli_upload/#create-table","title":"Create table","text":"<p>This part of the code creates the table you will later upload to the OEP.</p> <p>We need the metadata to get the table schema (columns).</p> <p>To be able to execute this part you will need to have executed the setup</p> <ul> <li>Linux</li> </ul> <pre><code>  oep-client --token $token --schema $topic create $table $example_metadata\n</code></pre> <ul> <li>Windows</li> </ul> <pre><code>  oep-client --token %token% --schema %topic% create %table% %example_metadata%\n</code></pre>"},{"location":"tutorials/02_oep_client/04_client_cli_upload/#upload-data","title":"Upload data","text":"<p>This part of the code uploads the table that you have created above to the OEP.</p> <p>To be able to execute this part you will need to have executed the setup, and you will need to have created a table.</p> <ul> <li>Linux</li> </ul> <pre><code>  oep-client --token $token --schema $topic insert $table $example_data\n</code></pre> <ul> <li>Windows</li> </ul> <pre><code>  oep-client --token %token% --schema %topic% insert %table% %example_data%\n</code></pre>"},{"location":"tutorials/02_oep_client/04_client_cli_upload/#upload-metadata","title":"Upload metadata","text":"<p>This part of the code will upload metadata that described the data in your table to the OEP.</p> <p>To be able to execute this part you will need to have executed the setup, and you will need to have created a table.</p> <ul> <li>Linux</li> </ul> <pre><code>  oep-client --token $token --schema $topic metadata set $table $example_metadata\n</code></pre> <ul> <li>Windows</li> </ul> <pre><code>  oep-client --token %token% --schema %topic% metadata set %table% %example_metadata%\n</code></pre>"},{"location":"tutorials/02_oep_client/04_client_cli_upload/#delete-table","title":"Delete table","text":"<p>This part of the code deletes the table (including the metadata) that you have uploaded to the OEP.</p> <p>To be able to execute this part you will need to have executed the setup, and you will need to have created a table.</p> <ul> <li>Linux</li> </ul> <pre><code>oep-client --token $token --schema $topic drop $table\n</code></pre> <ul> <li>Windows</li> </ul> <pre><code>oep-client --token %token% --schema %topic% drop %table%\n</code></pre>"},{"location":"tutorials/02_oep_client/04_client_cli_upload/#about-this-tutorial","title":"About this tutorial","text":"<ul> <li>Author: Christian Winger</li> <li>Copyright: \u00d6ko-Institut (2024)</li> <li>License: CC BY 4.0</li> <li>Attribution: \u00d6ko-Institut (2024): OEP Client Tutorial 04 - Upload data to the Open Energy Platform using the OEP Client in the command line</li> <li>Last update: 2024-10-21</li> </ul>"},{"location":"tutorials/03_external/external_resources/","title":"External resources","text":"<p>The following is a collection of external resources that are helpful in the context of the OpenEnergyPlatform and related subjects.</p> <p>Open Licensing - This course will help you find the best open license for your research outputs. A course by the FOSTER project</p> <p>Research Data Management - A course by efzn, UOL, C3L, Digitalisierte Energiesysteme, supported by NFDI4Energy and ZDIN</p>"},{"location":"tutorials/99_other/OEP_Research_Data_Publishing_Guidebook/","title":"Guidebook - How to Publish Your Data on the OEP","text":"In\u00a0[\u00a0]: Copied!"},{"location":"tutorials/99_other/OEP_Research_Data_Publishing_Guidebook/#guidebook-how-to-publish-your-data-on-the-oep","title":"Guidebook - How to Publish Your Data on the OEP\u00b6","text":"<p>The development of tutorials for the Open Energy Family takes place publicly in a dedicated tutorial repository. Please report bugs and suggestions as new issues. </p> <p>license: GNU Affero General Public License Version 3 (AGPL-3.0) copyright: Reiner Lemoine Institut  authors: christian-rli, jh-RLI, Ludee</p> <p>If Jupyter Notebooks are new to you and you'd like to get an introduction, have a look at this less than 10 minute introduction video. Official installation instructions are available on jupyter's readthedocs page.</p>"},{"location":"tutorials/99_other/OEP_Research_Data_Publishing_Guidebook/#introduction","title":"Introduction\u00b6","text":"<p>If your goal is to publish your energy system research data and you're wondering just about  what that entails, this is the right resource for you. This tutorial will guide you through the steps needed for publishing your data on the OEDB and supplying it with proper metadata. The process has the following steps:</p> <p>1 Creation of metadata  2 Initiation of metadata review  3 Uploading data and metadata </p> <p>This document describes each of these steps, refers to resources relevant for the tasks and ends by introducing the tools needed to upload your data. If your system is already set up, you can jump to an upload tutorial. If all of this is new to you, we recommend reading on. By uploading your data in this process described below, you will ensure that your data is: </p> <ul> <li>public</li> <li>findable</li> <li>structured</li> <li>licensed openly</li> <li>supplied with sources</li> <li>reviewed</li> </ul>"},{"location":"tutorials/99_other/OEP_Research_Data_Publishing_Guidebook/#1-creation-of-metadata","title":"1 Creation of metadata\u00b6","text":"<p>Metadata provide information about other data. By creating metadata for your dataset, you are making sure, that it is easier to find and to understand, it's supplied with its sources and its structure is well described. The OEP uses oemetadata as a standard, which was developed specifically for energy research modelling. It is based on json and compatible to the datapackage standard. An example oemetadata file in the current version is available in the oemetadata repository.</p> <p>Filling out a string for the first time might take a while. Once you're familiar with what the different fields stand for, it'll become much faster. You can start with an empty template string and just work your way from top to bottom. A description for every key of the string with example entries is available on the oemetadata repository.</p> <p>Take care when creating your resources that your data types correspond to postgresql datatypes, because these definitions will be used when uploading your data. Most likely, you will mostly use these types:</p> <ul> <li>For strings or any other kind of textual data, use \"text\"</li> <li>For numbers without fractional component, use \"integer\"</li> <li>For number with a fractional component, use \"float\"</li> </ul>  When selecting a license for your data, make sure that it is an open license!   <p>Proprietary data is not currently allowed on the OEP. We recommend using ODbL-1.0.</p>"},{"location":"tutorials/99_other/OEP_Research_Data_Publishing_Guidebook/#2-initiation-of-metadata-review","title":"2 Initiation of metadata review:\u00b6","text":"<p>Once your metadata string is ready, send it in for a review! The review process takes place publicly on GitHub. Create a new issue in the data-preprocessing repository and follow the workflow described in the issue.</p> <p>This includes uploading your metadata string to the folder data-review in a new branch and referencing the issue number. If you're unable or don't know how to do this, just attach your string to a comment in the issue you created and get in contact with a reviewer. The reviewer can help you with this.</p> <p>There is a reference manual for reviewers which will be followed to complete the review process. Once the review is done, the new branch will be merged with the master branch and if your data is on the OEP, a reviewed badge will eventually show next to it (this still needs to be implemented).</p>  You don't need to wait for the review to be done in order to upload your data or metadata to the OEDB!  <p>So you may just continue with the next step.</p>"},{"location":"tutorials/99_other/OEP_Research_Data_Publishing_Guidebook/#3-uploading-data","title":"3 Uploading data\u00b6","text":""},{"location":"tutorials/99_other/OEP_Research_Data_Publishing_Guidebook/#31-requirements","title":"3.1 Requirements\u00b6","text":"<p>The OEDB is a PostgreSQL database with a public, RESTful API. The OEP functions as an interface to it. Downloads from the OEDB can be carried out by anyone without registration. However, in order to upload, you will need a user account on the OpenEnergyPlatform. There you will be presented with a token, which allows you to upload data via the public API. If you haven't got one already, create a new account. To retrieve your token, do the following:</p>"},{"location":"tutorials/99_other/OEP_Research_Data_Publishing_Guidebook/#311-login","title":"3.1.1.  Login\u00b6","text":"<p>Click on the login button and sign in on the OEP.</p> <p> </p>"},{"location":"tutorials/99_other/OEP_Research_Data_Publishing_Guidebook/#312-copy-your-token","title":"3.1.2.  Copy your token\u00b6","text":"<p>After logging in, click on your profile name to see your information. To view your token, click on \"Show token\"</p> <p></p>"},{"location":"tutorials/99_other/OEP_Research_Data_Publishing_Guidebook/#32-using-the-api","title":"3.2. Using the API\u00b6","text":"<p>You can access the API with any tool that can send HTTP-requests. That means you can technically use the address bar of your browser to access data on the OEDB.</p> <p>For example the following links will return a json string of the columns and the rows respectively of the wind_turbine_library, a dataset published on the OEP:</p> <p>https://openenergyplatform.org/api/v0/schema/supply/tables/wind_turbine_library/columns/ https://openenergyplatform.org/api/v0/schema/supply/tables/wind_turbine_library/rows/</p> <p>Extending on this browser based approach to more complex tasks would be unfeasible however. You would also need to configure your browser to send your token in the header of every request in order to upload any data.</p> <p>Using the API documentation for working with the OEDB, users in the community can build their own tools to access the OEP. There is already a suite of small tools, mainly written in python, that aim to facilitate access. There is a hands on tutorial that will guide you through the process of uploading example data and metadata from files on your computer all the way into a publicly visible place on the OEP. The structure of the same tutorial is available as a template for you to fill in with your own data. These tutorials are going to use a range of tools. A brief description of these tools and how to set them up on your system will make up the rest of this guidebook.</p>"},{"location":"tutorials/99_other/OEP_Research_Data_Publishing_Guidebook/#oedialect","title":"oedialect\u00b6","text":"<p>SQLAlchemy is the python toolkit to work with PostgreSQL databases. SQLAlchemy internally uses so called \"dialects\" to provide a consistent interface to different database drivers. The oedialect supplies your SQLAlchemy installation with a dialect using the REST-API of the Open Energy Platform (OEP). In short, the oedialect allows you to use SQLAlchemy to down- and upload data to the OEP, which is helpful if you're using python as a means to handy your data. Installation instructions for SQLAlchemy for different operating systems are available on liquidweb. To install the oedialect, you can use pip:</p> <p><code>pip install oedialect</code></p>"},{"location":"tutorials/99_other/OEP_Research_Data_Publishing_Guidebook/#oem2orm","title":"oem2orm\u00b6","text":"<p>oem2orm stands for oemetadata to object relational mapping. It's a convenience tool written in python. It can create an engine to connect you to the OEP with your username and token and has a function, which reads all the metadata metadata strings in a folder and based on the contained information creates tables on the OEP using the oedialect. You can install it using pip: </p> <p><code>pip install oem2orm</code></p>"},{"location":"tutorials/99_other/OEP_Research_Data_Publishing_Guidebook/#oep-client","title":"oep-client\u00b6","text":"<p>The oep-client is a command line tool written in python. It offers a range of functionalities, including, downloading data and metadata, creating a table, uploading data, updating a table's metadata, and deleting tables that you created. As it is written in python it's also possible to import its functions to your python project. You can install the oep-client using pip:</p> <p><code>python3 -m pip install --upgrade oep-client</code></p>"},{"location":"tutorials/99_other/OEP_Research_Data_Publishing_Guidebook/#saio","title":"saio\u00b6","text":"<p>saio is another convenience tool. It allows for easy access to the data on the OEDB by allowing you to autoload table definitions. It also provides a helper function to read an sqlalchemy.orm.query.Query into a (Geo)Pandas dataframe. Install saio via pip:</p> <p><code>pip install saio</code></p>"},{"location":"tutorials/99_other/OEP_Research_Data_Publishing_Guidebook/#pandas","title":"pandas\u00b6","text":"<p>pandas is an open source library providing easy-to-use data structures and data analysis tools for the python. Pandas is often used in research to handle data and it is also used in several descriptions to read data into python before uploading it to the OEDB. Use pip to install pandas:</p> <p><code>pip install pandas</code></p>"},{"location":"tutorials/99_other/OEP_Research_Data_Publishing_Guidebook/#requests","title":"requests\u00b6","text":"<p>Requests allows you to send HTTP requests easily. It is used in tutorials that directly use the API of the OEP to make a connection. Use pip to install requests:</p> <p><code>pip install requests</code></p>"},{"location":"tutorials/99_other/beginners_guide/","title":"Beginners Guide: How to upload data to the OpenEnergy Platform","text":""},{"location":"tutorials/99_other/beginners_guide/#about-this-guide","title":"About this guide","text":"<p>This document describes how to upload data to the OpenEnergy Platform (OEP) using Python and the REST-API as well as a description on how to initiate the review process of that data.</p> <p>Several steps are needed to contribute actively to the platform. Some of them you only need to do once to get started. The steps described in this document are the following:</p> <ul> <li> <p>(once) Register at the OpenEnergy Platform</p> </li> <li> <p>(once) Register at GitHub and get invited to the OpenEnergy Platform Group</p> </li> <li> <p>Create data table(s) and upload data table(s)</p> </li> <li> <p>Create metadata and upload metadata to Github</p> </li> <li> <p>Initiate review</p> </li> <li> <p>Create factsheets</p> </li> </ul>"},{"location":"tutorials/99_other/beginners_guide/#1-things-you-only-need-to-do-once","title":"1. Things you only need to do once","text":""},{"location":"tutorials/99_other/beginners_guide/#11-register-at-the-openenergy-platform","title":"1.1. Register at the OpenEnergy Platform","text":"<ul> <li> <p>Registration</p> </li> <li> <p>Click Login button on Homepage and choose the option Create a new account.</p> </li> <li> <p>OR: go directly to https://openenergyplatform.org/user/register</p> </li> <li> <p>Fill out the required fields and click on Submit.</p> </li> <li> <p>You will receive an activation email, sent to your email address.</p> </li> <li> <p>Follow the instructions received in the email.</p> </li> <li> <p>After successfully activating and logging into your account, you will be able to view your user information.</p> </li> <li> <p>API-Token</p> <ul> <li> <p>The API token is necessary to make authenticated requests to the API.</p> </li> <li> <p>After you logged into the OEP, click the member icon in the upper right corner of the page</p> </li> <li> <p>You can find your API-Token under Your Security Information by clicking on Show token:</p> </li> </ul> <p></p> </li> </ul>"},{"location":"tutorials/99_other/beginners_guide/#12-register-at-github-and-get-invited-to-openenergyplatform-group","title":"1.2. Register at GitHub and get invited to OpenEnergyPlatform Group","text":"<ul> <li> <p>If you do not yet have a GitHub account, you need to register: https://github.com/join.</p> </li> <li> <p>You will then need to become a member of the group OpenEnergyPlatform: https://github.com/OpenEnergyPlatform by getting invited to the group. This works as follows:</p> </li> <li> <p>Get in touch via the contact form on the OpenEnergyPlatform: https://openenergyplatform.org/contact/.</p> </li> <li> <p>Fill in the form with your request to be added to the OpenEnergyPlatform group on GitHub. An example text is provided in the screenshot below.</p> <p></p> </li> <li> <p>A response will not be immediate. Please wait until you receive an invitation to the GitHub group. Only then you will be able to upload metadata and initiate data review.</p> </li> </ul>"},{"location":"tutorials/99_other/beginners_guide/#2-things-you-will-need-to-do-any-time-you-contribute-new-data-and-metadata","title":"2. Things you will need to do any time you contribute new data and metadata","text":""},{"location":"tutorials/99_other/beginners_guide/#21-create-and-upload-data-tables","title":"2.1. Create and upload data table(s)","text":"<p>Prerequisite for this step is that you are a registered user on openenergyplatform.org</p> <p>OPTION: CSV WIZARD: If you do not want to upload tables via the API, you can do so using the CSV-Wizard. Please consult this tutorial and then continue reading Section 2.2</p> <p>Please note: code snippets below are shown to highlight specific instances of a sequence of code. You find a complete sample code that you can copy &amp; paste and try under 2.1.4_ Complete code for one example</p> <ul> <li> <p>The REST-API can be used with any language that can make HTTP(s) requests.</p> </li> <li> <p>Most requests require you to add an authorization header: Authorization: Token API_TOKEN, where you substitute API_TOKEN with your token as described above.</p> </li> <li> <p>All requests (and most responses) will use json data as payload (the actual data content of the request).</p> </li> <li> <p>In the examples below, we use python and the requests package. All requests will use a requests session with the authorization header.</p> </li> </ul> <pre><code>    import requests\n    API_URL = 'https://openenergyplatform.org/api/v0'\n    session = requests.Session()\n    session.headers = {'Authorization': 'Token %s' % API_TOKEN}\n</code></pre> <ul> <li> <p>The requests in the following sections use roughly the same pattern:</p> </li> <li> <p>Prepare your request payload as a json object</p> </li> <li> <p>Prepare your request url</p> </li> <li> <p>Send your request using the correct verb (get, post, put, delete)</p> </li> <li> <p>Check if the request was successful</p> </li> </ul>"},{"location":"tutorials/99_other/beginners_guide/#211-create-a-new-table","title":"2.1.1. Create a new table","text":"<ul> <li> <p>You will need to create the tables at first in the model_draft topic. This topic is used for data that is still preliminary and subject to changes. After a successful review later, the table will be moved to the final target topic.</p> </li> <li> <p>You need to specify the name of the new table (TABLE_NAME), which should be a valid PostgreSQL table name, without spaces, ideally only containing lower case letters, numbers and underscores.</p> </li> <li> <p>You also need to specify names and data types of your columns, which also must be valid postgres data types.</p> </li> </ul> <pre><code>    # prepare request payload\n    data = {\n     'query': {\n      'columns': [\n       {\n        'name': 'id',\n        'data_type': 'bigserial'\n       },\n      # add more columns here\n      ],\n      'constraints': [\n       {\n        'constraint_type': 'PRIMARY KEY',\n        'constraint_parameter': 'id'\n       }\n      ]\n     }\n    }\n    # prepare api url\n    url = API_URL + '/topic/model_draft/tables/' + TABLE_NAME\n    # make request and check using PUT\n    res = session.put(url, json=data)\n    res.raise_for_status() # check: throws exception if not successful\n</code></pre>"},{"location":"tutorials/99_other/beginners_guide/#212-upload-data","title":"2.1.2. Upload data","text":"<ul> <li> <p>To upload data, you must first load it into a json structure as a list representing data rows, each of which is a dictionary mapping column names to values.</p> </li> <li> <p>In the example, we will use pandas to read data from an Excel workbook (WORKBOOK, WORKSHEET) into a data frame which we will then convert into a json object. Please note that this step will most likely require some modification to accommodate the specifics of your input data.</p> </li> <li> <p>In addition to that, at the end, you need to load your data into the specified json structure.</p> </li> <li> <p>After that, the data can be uploaded making a request to the API:</p> </li> </ul> <pre><code>    # load data into dataframe, convert into json\n    df = pd.read_excel(WORKBOOK, WORKSHEET)\n    records = df.to_json(orient='records')\n    records = json.loads(records)\n    # prepare request payload\n    data = {'query': records}\n    # prepare api url\n    url = API_URL + '/topic/model_draft/tables/' + TABLE_NAME + '/rows/new'\n    # make request\n    res = session.post(url, json=data)\n    res.raise_for_status() # check\n</code></pre> <ul> <li>You can repeat this if you want to upload your data in multiple batches.</li> </ul>"},{"location":"tutorials/99_other/beginners_guide/#213-starting-over-deleting-your-table","title":"2.1.3. Starting over: Deleting your table","text":"<ul> <li>While the table is still in the model draft, you can always delete the table and start over:</li> </ul> <pre><code>    # prepare api url\n    url = API_URL + '/topic/model_draft/tables/' + TABLE_NAME\n    # make request\n    res = session.delete(url)\n    res.raise_for_status() # check\n</code></pre>"},{"location":"tutorials/99_other/beginners_guide/#214-complete-code-for-one-example","title":"2.1.4. Complete code for one example","text":"<ul> <li> <p>This is an example code that you can copy and paste to execute the workflow we have described above. The workflow described does not take into account any specific settings you will need to make in your personal work environment. It can, however, simply be executed in the python prompt.</p> </li> <li> <p>Let's say you have an Excel workbook named CountryValues.xlsx, with a worksheet named data as depicted below:</p> </li> </ul> <p></p> <ul> <li> <p>Your API-Token is xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, and your desired table name shall be <code>my_example_table</code>. Please note that, while it is highly unlikely, there may already exist a table with this particular name created by another person. If this is the case, the example below will not work. Then, please choose another name for your table and substitute every instance with 'my_example_table' below with the name you have chosen.</p> </li> <li> <p>Save the example code below as <code>example.py</code> in the same folder as the Excel workbook, then open a command line, navigate to the folder, and type <code>python3 example.py</code></p> </li> </ul> <pre><code>    import json\n    import requests\n    import pandas as pd\n    API_TOKEN = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\n    TABLE_NAME = 'my_example_table'\n    API_URL = 'https://openenergyplatform.org/api/v0'\n    session = requests.Session()\n    session.headers = {'Authorization': 'Token %s' % API_TOKEN}\n</code></pre> <pre><code>    # --------------------------------------\n    # delete table (in case it already exists)\n    # --------------------------------------\n    # prepare api url\n    url = API_URL + '/topic/model_draft/tables/' + TABLE_NAME\n    # make request\n    res = session.delete(url)\n</code></pre> <pre><code>    # --------------------------------------\n    # create table\n    # --------------------------------------\n    # prepare request payload\n    data = {'query': {\n     'columns': [\n     {\n      'name': 'id',\n      'data_type': 'bigserial'\n     },\n     {\n      'name': 'country',\n      'data_type': 'varchar'\n     },\n     {\n      'name': 'year',\n      'data_type': 'int'\n     },\n     {\n      'name': 'value',\n      'data_type': 'float'\n     }\n     # add more columns here\n     ],\n     'constraints': [\n      {'constraint_type': 'PRIMARY KEY', 'constraint_parameter': 'id'}\n     ]\n    }}\n    # prepare api url\n    url = API_URL + '/topic/model_draft/tables/' + TABLE_NAME + '/'\n    # make request and check using PUT\n    res = session.put(url, json=data)\n    res.raise_for_status() # check: throws exception if not successful\n</code></pre> <pre><code>    # --------------------------------------\n    # read data\n    # --------------------------------------\n    # load data into dataframe, convert into json\n    df = pd.read_excel('CountryValues.xlsx', 'data')\n    records = df.to_json(orient='records')\n    records = json.loads(records)\n</code></pre> <pre><code>    # --------------------------------------\n    # upload data\n    # --------------------------------------\n    # prepare request payload\n    # 'records' is a list of dictionaries (field name: value)\n    data = {'query': records}\n    # prepare api url\n    url = API_URL + '/topic/model_draft/tables/' + TABLE_NAME + '/rows/new'\n    # make request\n    res = session.post(url, json=data)\n    res.raise_for_status()  # check\n</code></pre> <pre><code>    # --------------------------------------\n    # read data (to check if everything was ok)\n    # or search for your table here:\n    # https://openenergyplatform.org/dataedit/view/model_draft/tables/my_example_table\n    # --------------------------------------\n    # prepare api url\n    url = API_URL + '/topic/model_draft/tables/' + TABLE_NAME + '/rows'\n    # make request\n    res = session.get(url)\n    print(res.json())\n</code></pre> <pre><code>    # --------------------------------------\n    # delete table (because it was just a test)\n    # --------------------------------------\n    # prepare api url\n    url = API_URL + '/topic/model_draft/tables/' + TABLE_NAME\n    # make request\n    res = session.delete(url)\n    res.raise_for_status()  # check\n</code></pre>"},{"location":"tutorials/99_other/beginners_guide/#22-create-metadata","title":"2.2. Create metadata","text":"<p>You can create metadata that describes the context of your data in various ways. The easiest way is to navigate to the Meta information attached your table and click the Edit button:  You will then be presented with a set of fields that need and can be completed, see the display below:</p> <p></p> <p>Info: The .json specification of the metadata can be found here. </p>"},{"location":"tutorials/99_other/beginners_guide/#3-complete-your-contribution","title":"3. Complete your contribution","text":"<p>This document described how to upload data and metadata to the OpenEnergy Platform. For your contribution to become even more useful to other users of the platform and as further support for the community, we encourage you to create factsheets to describe the data you provided and their context in more detail.</p>"},{"location":"tutorials/99_other/beginners_guide/#31-create-factsheets","title":"3.1. Create Factsheets","text":"<ul> <li> <p>The drop-down menu Scenario Bundles shows you the 3 different Factsheet categories.</p> </li> <li> <p>Select a suitable factsheet category from the drop-down menu</p> </li> <li> <p>Scenario Bundle: this is the place that ties together all the information that you may want to describe regarding the data you have just uploaded. You can provide information on the scenario characteristics, the study reports that deal with your data, the sectors and technologies depicted, the models and frameworks used. Use this factsheet to enrich your contribution. </p> </li> <li> <p>Frameworks: use this factsheet to add information about the fundamental structure or toolbox to build a model, e.g. TIMES. Under Scenario Bundle you can then attach such a framework via a drop-down menu. </p> </li> <li> <p>Models: to describe a model that has been used to run a scenario; ideally this relates to a scenario for which you have uploaded data to the OEP. Under Scenario Bundle you can then attach models via a drop-down menu to your scenario. </p> </li> </ul>"},{"location":"tutorials/99_other/beginners_guide/#about-this-tutorial","title":"About this tutorial","text":"<p>Authors: Hannah F\u00f6rster, Victoria Liste, Christian Winger (all \u00d6ko-Institut).  Copyright: \u00d6ko-Institut (2021).  License: CC BY 4.0.  Attribution: \u00d6ko-Institut: Beginners Guide: How to upload data to the OpenEnergy Platform and initiate the review process.  Last update: 2024-10-21</p>"},{"location":"tutorials/99_other/checklist/","title":"Checklist for working with open data","text":"<p>All data generated in publicly funded research projects should be available to the public and the modeling community for reuse. This means ideally, all the following 6 points should be fulfilled:</p> <ol> <li>All data should be available in machine-readable formats, meaning that they should be structured so that a computer can process the contained information (as opposed to just the letters and the styling). File formats that are generally suitable for this are csv, json, xml and rdf. Databases are suitable as well. Unsuitable file formats include pdf files, word documents and presentations.</li> <li>All data is accompanied with metadata.</li> <li>Provide detailed and up-to-date documentation. The documentation should include detailed information about measurement and estimation techniques.</li> <li>The final data should be published under an open license. To facilitate analysis and reuse, data should be published under an established open license. We recommend a public domain dedication; where this is not possible, an attribution license is the second best choice, such as Creative Commons Attribution 4.0. See also Open Data Licenses</li> <li>The data should be published through centralized platforms, which permit download of data in bulk, be version controlled, and be permanently available, preferably through a Digital Object Identifier and provide API web access.</li> <li>All uploaded data from third parties should indicate who holds intellectual property rights. It must be transparent to users as to who holds the intellectual property rights.</li> </ol> <p>More detailed information on these topics can be found in Open Data for Electricity Modeling.</p>"},{"location":"tutorials/99_other/database_data/","title":"How to generate database conform data?","text":"<p>The following checklist will help you to prepare your data in a way that you will have less trouble uploading it into the OEP. The main purpose is to have your data machine-readable and simultaneously for humans easy to understand.</p> <ol> <li>Only work with tables</li> <li>If you work with Excel: use only ONE table per excel worksheet (see figure \"Poor Example\" and \"Good Example\" on how to split one table into multiple tables)</li> <li>Use English table names</li> <li>Use consistent file names. This will facilitate the upload.    a. Good example: energy_load_germany_pv, energy_load_germany_wind, hence: energy_load_germany_*    b. Poor example: energy_pv_load, wind_energie_Deutschland_version3</li> <li>Try to keep all files in one folder or in folders with consistent names as described in 4. to be easily machine readable</li> <li>Follow the conventions for columns:    a. Each column has only one entry (see figure \"Good Example\")    b. Speaking names (and see figure \"Good Example\")    i. Good example: engery_load_germany_pv    ii. Poor example: lpv_vs4    c. Follow naming conventions e.g. SI units if possible    d. Transpose your file if possible (e.g. in case of years as columns), see figure \"Poor Example\" and \"Good Example\". A tool helping you with this can be found at: #OpenEnergyPlatform/oeplatform/issues/350    e. Never start column names with a number (will not work during upload), figure \"Good Example\"    f. Use English column names    g. Make sure each column contains only specific datatypes: string (e.g. \u201cthis is a string\u201d), integer (e.g. 1,2,-5), float (e.g. 1.544) \u2026 see figure \"Good Example\"</li> <li>Optional: you might want to change your Excel to use \u2018.\u2019 (English) as a decimal separator instead of \u2018,\u2019 (German). Most programs expect '.' as separator and have it as a default setting, so while it is generally possible to keep ',' separators, changing it will make your programming life easier in the long run. The upload wizard on the OEP also supports both.</li> <li>Think about what you mean by missing values. There are two cases to differentiate: if you mean a value of zero, enter \u20180\u2019. If you mean that there was no data available or a field does not apply, set NULL or leave empty.</li> <li>Make sure you have one or more primary keys so that each entry is unique. A primary key is a unique identifier.    a. Example: first name, surname, passport_nr    The passport_nr is a primary key, because it is unique and identifies each person</li> <li>In case of dates     a. Always use the same format     b. Think about your time zone     c. In case of time intervals, which time stamp alignment do you use, start, middle or end alignment? (see OEO time stamp alignment)</li> <li>Make sure your model (input and) output data has always the same format: that will make your life easier to work with the OEP but also for your own post-processing</li> <li>If you have multiple tables, make sure they can be linked to one another     a. e.g. Person with first and surname and table with cars and car owners surname. And see figure: \"Good Example\"</li> </ol> <p>This is a poor and a good example. This gives an Idea how to solve these problems, there are many good ways to solve it and two possibilities are shown here.</p> <p>Poor Example</p> <p></p> <p>Good Example</p> <p>For good examples there are two options on how to split the timer series.</p> <ol> <li>This option is used in case of many wind turbine and solar park data:    </li> <li>This option is used if there are not as many wind turbines and solar parks    </li> </ol>"},{"location":"tutorials/99_other/download/","title":"How to download data from the OEP - CSV and datapackage","text":"<p>You want to download and access data? Then simply look out for these two buttons when you are viewing a data table - green for csv download only, yellow for datapackage download. It is as easy as this.</p> <p> </p> <p>Click the image to jump to a dataset to try yourself.</p> <p>You can download any data table on the OEP. Both downloads include the corresponding data table as a csv file.</p> <p>The datapackage additionally holds the attached metadata as a json string. It thus provides you with all necessary information as a neat package and we recommend using this. The datapackage is delivered as a .zip file.</p>"},{"location":"tutorials/99_other/download/#about-this-tutorial","title":"About this tutorial","text":"<ul> <li>Authors: Hannah F\u00f6rster</li> <li>Copyright: \u00d6ko-Institut (2022)</li> <li>License: CC BY 4.0</li> <li>Attribution: \u00d6ko-Institut (2022): How to download data from the OEP - CSV and datapackage. Last update: 2024-10-21</li> </ul>"},{"location":"tutorials/99_other/find_data/","title":"Find data on the OEP","text":"<p>The OEP currently offers two possibilities to search for data tables: free text and tags. You can use either one of these, or combine them for your search. Together, they make up filters. You can either search across all topics by navigating to topics or within a desired topic, by directly navigating to it, for example the scenario topic: Use the Search bar to enter free text, and/or click on any of the desired tags to create your search query. When you have selected the desired free text and / or tags, the search will be performed automatically. </p> <p>The example below exemplarily shows you how to use free-text (parameters) and tags (EU-legislation) together and an excerpt of the results in the scenario topic. Please note that when you select more than one tag only those tables will be shown in the list of results which contain all the chosen tags.</p> <p></p>"},{"location":"tutorials/99_other/find_data/#about-this-tutorial","title":"About this tutorial","text":"<ul> <li>Authors: Hannah F\u00f6rster</li> <li>Copyright: \u00d6ko-Institut (2022)</li> <li>License: CC BY 4.0.</li> <li>Attribution: \u00d6ko-Institut (2022): Find data on the OEP. Last update: 2024-10-21</li> </ul>"},{"location":"tutorials/99_other/getting_started_with_OEMetadata/","title":"Introduction to OpenEnergyMetadata (OEM)","text":""},{"location":"tutorials/99_other/getting_started_with_OEMetadata/#introduction-to-openenergymetadata-oem","title":"Introduction to OpenEnergyMetadata (OEM)\u00b6","text":"<p>The development of tutorials for the Open Energy Family takes place publicly in a dedicated tutorial repository. Please report bugs and suggestions as new issues. If Jupyter Notebooks are new to you and you'd like to get an introduction, have a look at this less than 10 minute introduction video. Official installation instructions are available on jupyter's readthedocs page.</p> <p>license: GNU Affero General Public License Version 3 (AGPL-3.0) copyright: Reiner Lemoine Institut  authors: jh-RLI</p>"},{"location":"tutorials/99_other/getting_started_with_OEMetadata/#takeaways","title":"Takeaways\u00b6","text":"<ul> <li>Understand what OEMetadata is and where it is applied.</li> <li>How to use OEMetadata.</li> <li>Find helpful resources.</li> <li>Where to start contributing as a developer.</li> </ul>"},{"location":"tutorials/99_other/getting_started_with_OEMetadata/#the-openenergymetadata","title":"The OpenEnergyMetadata\u00b6","text":""},{"location":"tutorials/99_other/getting_started_with_OEMetadata/#introduction","title":"Introduction\u00b6","text":"<p>OpenenEnergyMetadata(OEM) is a standardised metadata format. OEM are used to provide relevant information about a dataset on the OEP \"It\u00b4s data explaining the data :)\". OEM are mandatory for oficially publishing data on the OEP, because this will clarify any licensing issues in advance and also provide context for the review that is part of every publishing process. You can find out how to publish your data in the publishing guidebook. There are descriptions on how to upload OEM on the Open Energy Platform itself with a wizard and a more technical description) for using the API in scrips. If a dataset has already been uploaded to the OEP, then the metadata can be seen in the view of the table by clicking on the tab <code>Meta Information</code> right next to <code>Data</code>. The OEP also offers functions for editing and downloading metadata, which can be accessed in the Meta Information view . Make sure to sign in to the OEP in advance to be able to edit the data. You can see what permissions you have in the options on the rigth hand side by clicking on Permissions.</p>"},{"location":"tutorials/99_other/getting_started_with_OEMetadata/#compatible-with-frictionless-data","title":"Compatible with frictionless data\u00b6","text":"<p>OEMetadata development is partially based on the specification of frictionless data. The advantage is that OEM is compatible with frictionless datapackage format and thus a solid basis for applicability is ensured. In the easiest case, a frictionless datapackage is a JSON-file that is placed directly next to the actual data - the former describing the latter.</p>"},{"location":"tutorials/99_other/getting_started_with_OEMetadata/#developer-information","title":"Developer information\u00b6","text":"<p>The oemetadata is developed in JSON format and is published on GitHub under the MIT License. The current version of the JSON string can be found in the oemetadata repository. As an open source project, suggestions for improvement and forking are welcome and encouraged. Please take note of our development philosophy when you start contributing.</p>"},{"location":"tutorials/99_other/getting_started_with_OEMetadata/#structure-of-the-oemetadata","title":"Structure of the OEMetadata\u00b6","text":"<p>The OEMetadata are, generally speaking, divided into six sections:</p> <ol> <li>general<ul> <li>Describes the dataset</li> <li>Links to related data tables on the OEP</li> <li>References further documentation</li> </ul> </li> <li>spatiotemporal<ul> <li>Summarizes spatial and temporal information of the dataset</li> </ul> </li> <li>sources<ul> <li>Documents used sources with attribution and licenses</li> </ul> </li> <li>license<ul> <li>The license for the data</li> <li>An open license must be available for OEP upload</li> </ul> </li> <li>history<ul> <li>Information on who created/edited the metadata</li> </ul> </li> <li>data model<ul> <li>Structure of the table in which the data is stored,</li> <li>Technical documentation of the table</li> <li>Manual fillout  require basic database (SQL) knowledge</li> </ul> </li> </ol> <p>There is a detailed overview in which all fields that occur in the metadata are described. You will also find sample values there.</p>"},{"location":"tutorials/99_other/getting_started_with_OEMetadata/#suggested-workflow-to-get-started","title":"Suggested workflow to get started\u00b6","text":"<p>There are several ways to create the OEMetadata. One way is to download the template JSON file and fill it manually in your text editor of choice. Another option is to use a tool on the OEP website called wizard. There, a table can be created, data can be uploaded from an excel or CSV file and the metadata can be filled in. The wizard is much more user friendly for beginners, so we recommend using the tool. Once the metadata has been created, in order to go into review it should be downloaded and put in an inssue on GitHub to start the review process. If you are unable to do this, create an issue and get in touch with a reviewer who will help you with those steps.</p> <p>The metadata can be filled in to the best of your knowledge in a first step. If there are any difficulties, it is sufficient to create an issue on GitHub to get in contact with the OEP developers. The issue template can be used for this purpose. Unfortunately at this stage of development a GitHub account is still required for this.</p>"},{"location":"tutorials/99_other/oemetadata/","title":"Tutorial - Working with OEMetaData","text":""},{"location":"tutorials/99_other/oemetadata/#learnings","title":"Learnings","text":"<p>This tutorial will enable you to:</p> <ul> <li>know what OEMetaData are</li> <li>create and modify OEMetaData</li> <li>use the OEO-extended to create new units</li> </ul>"},{"location":"tutorials/99_other/oemetadata/#introduction","title":"Introduction","text":"<p>This tutorial will always refer specifically to OEMetaData (the Metadata used on the Open Energy Platform (OEP)). For a more general overview please see the course on Metadata.</p>"},{"location":"tutorials/99_other/oemetadata/#important-information-on-oemetadata","title":"Important Information on OEMetaData","text":"<ul> <li>OEMetaData follow the specifications of one of the release versions of the OEP. At the time v1.6.0, soon 2.0.0.</li> <li>OEMetaData are always a JSON-file, which can refer to other elements, e.g. websides, classes from the Open Energy Ontology (OEO) etc.. The OEMetaData in version v1.6.0 always describes one whole dataset to a table. </li> <li>OEMetaData follow a pattern. Find the key descriptions for the newest version of the OEMetaData on GitHub.</li> <li>There can always only be one version of the OEMetaData on the OEP! Meaning that the livetime of OEMetaData is critical because othervise there might be multiple datasets to one table. In order for that not to happen the published OEMetaData for a published table on the OEP stay like this until there is a new version of the OEMetaData. (For more information on the publishing process see this course.)  </li> <li>The minimal requirement to the OEMetaData in order to exist on the OEP to an existing table is a filled out ID field. Here the URL of the tale must be incerted. For all other fields please follow the key descriptions or see the information provided in the OEMetaDataBuilder.</li> </ul>"},{"location":"tutorials/99_other/oemetadata/#how-to-create-oemetadata","title":"How to create OEMetaData","text":"<p>There are essintially two ways of creating OEMetaData. Both can be done with and without an already on the OEP existing table.</p> <p>Manually creating OEMetaData using the OMI</p> <p>You can manually create a OEMetaData as a JSON-file on your computer. This might be useful if you want to create multiple OEMetaData datasets for tables, where some fields will be filled out the same. Then it is much easier to copy and paste the entries. It is possible to manually create OEMetaData and later on modify them via the OEMetaDataBuilder. Note: Should only be done while using the OpenMetadataIntegration (OMI). This way of creating OEMetaData might result in faulty OEMetaData because the guidelines from the OEMetaDataBuilder are not provided while creating the dataset(s).</p> <p>Creating OEMetaData using the OEMetaDataBuilder</p> <p>On the OEP there is a tool to create your OEMetaData directly on the platfrom. It is called OEMetaDataBuilder and can be used when there already exist a table on the OEP for which you want tor create the OEMetaData or as standalone version when no table, for which the OEMetaData dataset is for, exist on the OEP.</p>"},{"location":"tutorials/99_other/oemetadata/#how-to-use-the-oemetadatabuilder","title":"How to use the OEMetaDataBuilder","text":"<p>You can find the OEMetaDataBuilder on the OEP under Database by clicking on <code>OEMetaBuilder</code> in the upper right corner.   Then the OEMetaDataBuilder opens and you can see all the fields. Right next to the headline <code>Create new Metadata</code> there are two buttons; With the first one (the pen with <code>JSON</code>) you can edit and/or copy the code on which this page is based on in a popup window. With the second (the menu with <code>properties</code>) you can choose which fields will be shown or hidden by clicking on them in the list in the popup window. Whenever there is a such a <code>menu</code> button next to a headline it enables you to choose which fields will be shown or hidden in the section the hedline belongs to. At the lower right corner three buttons appear to <code>Submit</code>, <code>Cancel</code> or <code>Download</code> your OEMetaData. You can submit your OEMetaData if there already exists a table for your dataset. You can always download the dataset as a JSON-file or cancel the process. Beneath all fields is a description of what values and information may be filled in the field above. For more detailed information please see the key descriptions.  In order for the OEMetaData dataset to exist on the OEP the ID field must be filled out. You can also give a name, title and description to your OEMetaData. If you create OEMetaData to an already existing table some fields will be filled automatically once you filled in the ID of the table. This makes it easier for you and minimizes the possible errors.  Under <code>Subject</code> you can provide subjects which describe your data. In the <code>Name</code>-field please provide the human readable name of the subject, e.g. energy. In the <code>Path</code>-field please provide the corresponding URL to the OEO, e.g. https://openenergy-platform.org/ontology/oeo/OEO_00000150. You can add subjects by clicking on the <code>+</code> right next to the headline <code>Subject</code>. Note: Subjects help other users to find your data and know what it is about.   You can provide language tag(s) for all languages used in your data, inculding the table and the OEMetaData dataset. You can add multiple languages by clicking on the <code>+</code> right next to the headline <code>Language</code>. Note: Please use the required standard (IETF (BCP47)).   Additionally to the Subjects you can also provide <code>Keywords</code>. These don't have to be defined in the OEO, but can help to describe the content of your data even more precisly. The Keywords make it also possible to filter the tables in the OEO Database.  You can give context to your data, e.g. a research project. This makes your data more comprehendable and traceable for others.   You can specify the spatial context of your data, e.g. the region in which a research was done.  You can also define the time of your data. Either a reference date or a time span.   You can add a <code>Timeseries</code> by clicking on the <code>+</code> next to the headline. There you can specify start, end and resolution of the series and information about how the data is implemented in the table. You can add multiple timeseries if neccessarry.   You can provide information on your <code>Sources</code>, <code>Licenses</code>, <code>Contributers</code> and <code>Recourses</code>. You can add each of them by clicking on the <code>+</code> next to the headline.  You can list your sources by providing a human readable title, a description of the source and the path to the source as URL. You can add multiple sources.  You can also provide the license of each source by providing the SPDX identifire, a human readable name as well as a path to the license and further information.   You may provide information about the contributors of your data. You can add multiple contributors and add details about their contribution.   You can also annotate the data in your table. This helps to make the data in your table comparable to others because it makes a connection between columns and/or fields to classes in the OEO. If you create OEMetaData for an already existing table, the names of the fields will be filled in autamatically and make the process of annotating more convinient. Note: If you want to annotate without an already on the OEO existing table you must have a basic understandning to datastructure and databases and their relations. In order to do so you must add resource(s) by clicking on the <code>+</code> next to the headline <code>Recourses</code>. For all resources you must add an unique name. Ich bin etwas verwirrt und wei\u00df nicht, ob ich das folgende richtig beschreibe!  You can specify the content of a field in your table by identifying the field, giving its description and data type.  The important step of making the connection between the entries in your table and the classes of the ontology happens now by providing the human readable term and the path to the OEO.  Using the OEOextended If you want to use an unit which is not in the OEO yet, meaning you can't find it via the implemented search, you can click on the button <code>Open OEO-extended</code>. This will open a popup window.  In the OEO-extended (OEOX) it is possible to create an additional unit using units already existing in the OEO. All created units will be reviewed and published on GitHub and uploaded to the OEO. For further information on the OEOX please see this paper. To create the new unit you can choose your <code>Numerator(s)</code> and <code>Denominator(s)</code>. You can respectively choose the unit name from all units implemented in the OEO, e.g. hour, a <code>Unit Type</code> according to the power you want to have (linear, squared or cubic) and, if neccessarry, a <code>Unit Prefix</code> e.g. mega. Once you entered something in the <code>Unit Name</code>-field a fraction will appear showing you the unit you are about to create. It is possible to choose mulitple Numerator and Denominator, which will be each multiplied by each other. When you created the unit you want to use, click <code>Save</code>. Then the URI to the new unit in the OEOX will appear. You have to copy and paste it to your browser in order to entry the <code>Name</code> and <code>Path</code> in the <code>isAbout</code>-field. The OEOX is implemented on different fields in the OEMetaDataBuilder to make it easier to create new units.   You can also provide a class of the OEO for entries of a whole column. By annotating the name of the column with the name and path of the OEO class. You only have to fill in the name fied and select one option from the drop down menu and the path will be filled in automatically. The result would be for example: The column name is 'sc' for 'scenario'. So the annotation name is 'scenario' and the path would be 'http://openenergy-platform.org/ontology/oeo/OEO_00000364'.  To annotate a single value from a cell as part of the current column, you can annotate the specific value, e.g. column 'Gas' has the value 'co2eq' and should be annotated with 'Carbon Dioxide Equivalent Quantity Value'. The annotation can therefore only be made if values are already known. This value must be entered in the value field. The <code>Name</code> &amp; <code>Path</code> fields are filled in in the same way as in the is About section. This type of annotation can be very time consuming. If you have many unique values in your column, we recommend creating an additional table that assigns the values and annotations, as this seems to make more sense. Meaning in some specific cases it might be better to manually create your annotations in the OEMetaData and the OEMetaDataBuilder is not the best option.   You can also give a <code>Primary Key</code> which uniquely identifies each row of your table.  You can also refer to an other table by giving a <code>Foreign Key</code>.  If you want to reference another table  you can provide the foreign table in the <code>Resource</code>-field and then specifying which column should be referencced in the <code>Field</code> below.  At the end you can provide an explanation of your data in terms defined by the OEO and a URI via the DBpedia Databus. </p>"},{"location":"tutorials/99_other/oemetadata/#about-this-tutorial","title":"About this tutorial","text":"<ul> <li>Author: Vismaya Jochem</li> <li>Copyright: Reiner Lemoine Institut</li> <li>License: CC BY 4.0</li> <li>Attribution: Open Energy Academy - OEMetaData Tutorial \u00a9 Reiner Lemoine Institut</li> <li>Last update: 2024-10-21</li> </ul>"},{"location":"tutorials/99_other/publish/","title":"Tutorial - How to Publish data and metadata on the OEP","text":""},{"location":"tutorials/99_other/publish/#learnings","title":"Learnings","text":"<p>This tutorials will enable you to:</p> <ul> <li>Publish your data and metadata <ul> <li>with an embargo</li> <li>to a topic</li> </ul> </li> </ul>"},{"location":"tutorials/99_other/publish/#requirements","title":"Requirements","text":"<ul> <li>OEP Account</li> <li>a table or dataset with metadata uploaded to the OpenEnergyPlatform (OEP)</li> </ul>"},{"location":"tutorials/99_other/publish/#introduction","title":"Introduction","text":"<p>This tutorial will teach you step-by-step how to publish your data and metadata using the OEP wizard. If you want to use the API, please have a look at this tutorial and for the OEP Client see this or this tutorial. For more general information on the publishing process and the empbargo period, see this course. Comment: Links will be implemented once they are avalaible.</p>"},{"location":"tutorials/99_other/publish/#choosing-a-table-to-be-published","title":"Choosing a table to be published","text":"<p>If you want to publish a table (including [data and] metadata) you have to go to your profile page on the OEP. Now select the tab <code>Tables</code>. Listed are data tables that you have uploaded or where you got group permissions assinged to; First are listed all tables you have already published, if you have not published any tables yet, this field will show 'You have never published a table.'. Beneath are listed all of your tables in the model draft section.  From this tables you can select the table you want to publish. Note: Only tables with an valid id and license in their metadata can be published on the OEP.</p>"},{"location":"tutorials/99_other/publish/#choosing-an-embargo-and-a-topic","title":"Choosing an embargo and a topic","text":"<p>Once you selected the table you want to publish, a pop-up field <code>Publish Table</code> will open. Next to the fields is an <code>i</code> icon giving more information if you hover your mouse over it. First you can apply an embargo; in a drop down menu you can select between none, and a 6 months or 1 year embargo period.  Note: If you selct <code>None</code> there will be no embargo periode applied, even if you selected one while uploading the table. Second you have to <code>Select data topic</code> from one of the 12 available topics; scenario, boundaries, climate, demand, economy, enviromente, grid, openstreetmap, policy, refernce, society and supply. Note: You can only choose one data topic. With tags it is possible to mark the content of you data even more precisely.</p>"},{"location":"tutorials/99_other/publish/#finishing-the-process","title":"Finishing the process","text":"<p>Once you click <code>Confirm</code> in the pop-up window the table will be moved from the model draft to the data topic you selected.  Now it can be seen in the Database under the selcted topic and on the profile page it is now visible as Published datatables.</p>"},{"location":"tutorials/99_other/publish/#feedback","title":"Feedback","text":"<p>You can provide feedback on this tutorial here: https://github.com/OpenEnergyPlatform/academy/issues/189</p>"},{"location":"tutorials/99_other/publish/#about-this-tutorial","title":"About this tutorial","text":"<ul> <li>Author: Vismaya Jochem</li> <li>Copyright: Reiner Lemoine Institut</li> <li>License: CC BY 4.0</li> <li>Attribution: Open Energy Academy - OEMetaData Tutorial \u00a9 Reiner Lemoine Institut</li> <li>Last update: 2024-10-21</li> </ul>"},{"location":"tutorials/99_other/review_process/","title":"Tutorial - Open Peer Review for OEMetadata","text":""},{"location":"tutorials/99_other/review_process/#learnings","title":"Learnings","text":"<p>This tutorials will enable you to:</p> <ul> <li>Complete every step in the workflow of the Review Process<ul> <li>Initiation</li> <li>Review</li> <li>Completion</li> </ul> </li> </ul>"},{"location":"tutorials/99_other/review_process/#requirements","title":"Requirements","text":"<ul> <li>OEP Account</li> <li>a table or dataset uploaded to the OpenEnergyPlatform (OEP)</li> <li>metadata for that table or dataset</li> </ul>"},{"location":"tutorials/99_other/review_process/#introduction","title":"Introduction","text":"<p>This course will teach you step-by-step how the open peer review process on the OEP works. For a more general overview of the peer review process have a look at the course 09 - Open Peer Review.</p>"},{"location":"tutorials/99_other/review_process/#metadata-upload","title":"Metadata Upload","text":"<p>In a first step, a contributer uploads metadata to the OpenEnergyPlatform (OEP). Note that a prerequisite to upload metadata is an existing table. We are going to call this person metadata owner from now on. If you are unsure how to create and upload metadata, have a look at this tutorial. The metadata owner has to make sure that the metadata include a license. They can also apply an embargo period of 6 months or 1 year if they need to. The metadata are automatically uploaded to the model_draft schema.</p>"},{"location":"tutorials/99_other/review_process/#initiation-of-the-review-process","title":"Initiation of the Review Process","text":"<p>Once the metadata are publicly accessible in the model_draft section, anyone (except the metadata owner) can start a review by going to the 'Open Peer Review' View (next to 'Meta information') and clicking on 'Start Open Peer Review' at the end of the page.  The review process is exclusive; meaning that once the review process has started, no one else can initiate another review process for the same metadata.  However, after a review is finished, a new review can be started right away.</p>"},{"location":"tutorials/99_other/review_process/#review-process","title":"Review Process","text":"<p>The reviewer who initiated the process must review all fields except empty fields ('None'), contributor fields and technical resource metadata fields. The metadata are devided into sections: General, Spatial &amp; temporal, Source, License and Summary. When selected a division, while reviewing the reviewer sees on the left hand side the list with all fields that need reviewing, on the right hand side a window opens according to the field which is being reviewed. There the definition of the field and an correct example is given, as well as the badge. Below the review options are given; accept the field, suggest a change, or reject it and provide an alternative. To navigate one can click on the fields on the left hand side or use the small arrows in the window on the right hand side.</p> <p>Under <code>General</code>, basic informations such as id and title must be given.  The data for spatial and temporal information are given under <code>Spatial &amp; temporal. TODO Missing Screenshot. Please provide the information about the used sources under</code>Sources.  Under <code>License</code> the information on the used license must be given.  The <code>Summary</code> gives an overview over all fields and shows for which fields a review is missing. </p> <p>It is possible to save your progress with the button in the rigth upper corner Save Progress. (Note: The button quit leads only back to the database. Once you started a review process it is not possible to cancel it!).</p> <p>Users can find all reviews in progress on their profile page under <code>Reviews</code>. </p> <p>Once the review is completed, it can be submitted with the <code>Submit</code> button in the upper right corner. The review is then transmitted from the reviewer back to the contributer. The reviewer can only forward their review to the contributor once they have evaluated all non-empty fields i.e. accepted, suggested or rejected them. (See also: How do you review open data?)</p>"},{"location":"tutorials/99_other/review_process/#handling-review-suggestions","title":"Handling Review Suggestions","text":"<p>If the reviewer has suggestions for certain fields, these are send to the contributor. In the contributor's profile, under the Peer Review section, the review with the reviewer\u2019s suggestions can be seen. The contributor can then accept or reject the reviewer\u2019s suggestions, proposing alternatives if necessary. After the contributor has accepted/rejected all suggestions, they send it back to the reviewer for verification. This process ends when all fields are mutually accepted.</p>"},{"location":"tutorials/99_other/review_process/#completion-of-the-review-process","title":"Completion of the Review Process","text":"<p>When both, the reviewer and the contributer come to an agreement and mutually accept all fields the reviewer can choose a badge and complete the review. </p>"},{"location":"tutorials/99_other/review_process/#post-review-metadata-management","title":"Post-Review Metadata Management","text":"<p>After the review process is completed, the table &amp; metadata owner can move the metadata from the model_draft to one of the 12 other topics. An embargo period of 6 months or 1 year may be applied. </p>"},{"location":"tutorials/99_other/review_process/#feedback","title":"Feedback","text":"<p>You can provide feedback on this tutorial here.</p>"},{"location":"tutorials/99_other/review_process/#about-this-tutorial","title":"About this tutorial","text":"<ul> <li>Author: Vismaya Jochem, Christian Hofmann</li> <li>Copyright: Reiner Lemoine Institut</li> <li>License: CC BY 4.0</li> <li>Attribution: Open Energy Academy - OEMetaData Tutorial \u00a9 Reiner Lemoine Institut</li> <li>Last update: 2024-10-21</li> </ul>"},{"location":"tutorials/99_other/tutorial_open-data-licenses/","title":"Open Data Licenses","text":""},{"location":"tutorials/99_other/tutorial_open-data-licenses/#open-data-licenses","title":"Open Data Licenses\u00b6","text":"<p>The development of tutorials for the Open Energy Family takes place publicly in a dedicated tutorial repository. Please report bugs and suggestions as new issues. If Jupyter Notebooks are new to you and you'd like to get an introduction, have a look at this less than 10 minute introduction video. Official installation instructions are available on jupyter's readthedocs page.</p> <p>license: GNU Affero General Public License Version 3 (AGPL-3.0) copyright: Reiner Lemoine Institut  authors: Ludwig H\u00fclk</p>"},{"location":"tutorials/99_other/tutorial_open-data-licenses/#takeaways","title":"Takeaways\u00b6","text":"<ul> <li>Overview of existing open data licenses</li> <li>Suitable and allowed open licenses for the OEP</li> </ul>"},{"location":"tutorials/99_other/tutorial_open-data-licenses/#introduction","title":"Introduction\u00b6","text":"<p>Licensing your data is important. Copyright affects all digital information and without context it's unclear if our data can be used by others or not. Supplying a license will automate the steps of asking for permission and allowing, so it makes life better for the giving and the receiving end. Note that in some countries, like Germany, it is not possible to waive one's copyright. Data that don't come with any license are not open. A license will provide legal certainty for usage. Choosing an established license will take care of questionable edge cases without umbiguity as well. </p> <p>In the field of information technology there are many licenses. Some cover multiple materials and domains, i.e. software, data or content while others only cover specific domains. </p> <p>This tutorial aims to collect and describe existing and commonly used open data licenses.  Please note that there are different definitions of free, open, libre and what falls into open science data.</p>"},{"location":"tutorials/99_other/tutorial_open-data-licenses/#open-licenses","title":"Open Licenses\u00b6","text":"<p>The Open Knowledge Foundation provides a definition for open data:</p>  \u201cOpen data and content can be freely used, modified, and shared by anyone for any purpose\u201d  <p>In general, open licenses grant the four freedoms, i.e. rights, that were originally defined for free software. These freedoms are:</p> <ol> <li>to run the program as wished and for any purpose</li> <li>to study how the program works, and change it so it does your computing as wished. Access to the source code is a precondition for this.</li> <li>to redistribute copies so you can help others</li> <li>to distribute copies of modified versions to others</li> </ol> <p>These freedoms can be translated to open data. So they become the freedoms to freely use, analyse, share and modify the data. The main difference between open data licenes and free or open source software licenses, lies in the definition of the obligations that must be met in order to obtain the rights. There are already lists of open source licenses that guarantee the four freedoms. For example the Open Source Initiative (OSI) offers a list of approved licenses. </p>"},{"location":"tutorials/99_other/tutorial_open-data-licenses/#licenses-which-are-not-open","title":"Licenses which are not open\u00b6","text":"<p>There are certain obligations that a license may formalise, which will prevent the data from being considered open! The Open Knowledge Foundation has a section on non-conformant clauses. In brief, the main relevant clauses are:</p> <ul> <li>Non-commercial (NC)  You may not use the material for commercial purposes. As there is no definition of what is considered commercial, and an NGO or a non-profit organization may also be considered commercial entities, this clause renders data licensed under it not open.</li> <li>No Derivatives (ND)  You may not alter, transform, or build upon this work. This limits your freedom to modify the data and is therefore not open.</li> </ul>"},{"location":"tutorials/99_other/tutorial_open-data-licenses/#open-data-licenses","title":"Open Data Licenses\u00b6","text":"<p>The open data licenses below are grouped by the three main obligations. For a broader list of licenses, also see: https://github.com/ifrOSS/ifrOSS/blob/master/OpenDataLicenses.md and https://opendefinition.org/licenses/ . </p>"},{"location":"tutorials/99_other/tutorial_open-data-licenses/#public-domain","title":"Public Domain\u00b6","text":"<p>Public domain is a concept in which no copyright or other protection like patents and trademark exists and thus no obligations are defined. In order to label and communicate this, information about being public domain is useful! In some countries, like Germany, it is not possible to waive one's copyright. Specifically declaring an unrestrictive open license will ensure a legal status that is equivalent to public domain and that works worldwide.  For more information see the international definition of public domain and the German/European Gemeinfreiheit.</p> <p>Usecase: Data for which no attribution to authors is required, e.g. \"helper tables\" for conversions.</p> <p>Openness: As open as possible, but others can create non-open derivatives of it.</p> id name spdx link comment 1.1 Creative Commons Zero v1.0 Universal CC0-1.0 https://creativecommons.org/publicdomain/zero/1.0/legalcode recommended 1.2 ODC Public Domain Dedication &amp; License 1.0 PDDL-1.0 https://opendatacommons.org/licenses/pddl/1-0/ recommended 1.3 Datenlizenz Deutschland \u2013 Zero \u2013 Version 2.0 dl-de/zero-2-0 https://www.govdata.de/dl-de/zero-2-0 granted only by the German government 1.4 Public Domain Mark CC-PDDC https://creativecommons.org/licenses/publicdomain/ not recommended"},{"location":"tutorials/99_other/tutorial_open-data-licenses/#attribution","title":"Attribution\u00b6","text":"<p>This obligation prescribes creating and placing an attribution string close to the created work. The string must contain the name of the author and/or copyright holder and has sometimes additional requirements, such as a link to the license text or the original source. Be aware that this attribution string is different from the scientific citation string, which is necessary for good scientific practice.  Licenses that merely require an attribution are often referred to as permissive licenses</p> <p>For more information, see Best practices for attribution and  Attribution Generator.</p> <p>Usecase: Data for which naming of the authors and/or copyright holders is required, e.g. \"input and result data\". Note: The holder of database rights under EU law is the investor, not the author. The same is true for works made for hire in the US.</p> <p>Openness: Open and suitable for acedemic work.</p> id name spdx link comment 2.1 Creative Commons Attribution 4.0 International CC-BY-4.0 https://creativecommons.org/licenses/by/4.0/legalcode recommended, prior versions OK if necessary 2.2 Open Data Commons Attribution License v1.0 ODC-By-1.0 https://opendatacommons.org/licenses/by/1-0/ recommended 2.3 Community Data License Agreement \u2013 Permissive \u2013 Version 1.0 CDLA-Permissive-1.0 https://cdla.io/permissive-1-0/ 2.4 Datenlizenz Deutschland \u2013 Namensnennung \u2013 Version 2.0 dl-de/by-2-0 (no official spdx-id) https://www.govdata.de/dl-de/by-2-0 granted only by the German government 2.5 Gesetz \u00fcber den Zugang zu digitalen Geodaten (Geodatenzugangsgesetz - GeoZG) GeoZG (no official spdx-id) https://www.gesetze-im-internet.de/geozg/index.html quasi-license, granted only by the German government 2.6 Verordnung zur Festlegung der Nutzungsbestimmungen f\u00fcr die Bereitstellung von Geodaten des Bundes (GeoNutzV) GeoNutzV https://www.gesetze-im-internet.de/geonutzv/index.html quasi-license, granted only by the German government. Requires citation instead of attribution"},{"location":"tutorials/99_other/tutorial_open-data-licenses/#share-alike-copyleft","title":"Share-Alike (Copyleft)\u00b6","text":"<p>The Share-Alike obligation requires that you choose the exact same license for aggregated or modified data. It can be described as reciprocal, hereditary or (negatively connotated) virulent.</p> <p>For more information see copyleft on Wikipedia.</p> <p>Usecase: Data where naming of the authors is required and all further updates must be open as well, e.g. \"manual collection of technical parameters from factsheets\".</p> <p>Openness: Open and will be open forever.</p> id name spdx link comment 3.1 ODC Open Database License v1.0 ODbL-1.0 https://opendatacommons.org/licenses/odbl/1-0/ recommended 3.2 Creative Commons Attribution Share Alike 4.0 International CC-BY-SA-4.0 https://creativecommons.org/licenses/by-sa/4.0/legalcode not recommended!  Note that different copyleft licenses are incompatible by default! Compatibility among copyleft licenses requires a specific compatibility clause, otherwise they create data silos. The OEP decided for the ODbL as only suitable copyleft license due to the use of OpenStreetMap (OSM) data."},{"location":"tutorials/99_other/tutorial_open-data-licenses/#legal-bases-for-use-of-data","title":"Legal bases for use of data\u00b6","text":"<p>There are a few legal bases with the goal of providing an open access and free use of public data. For example there is a directive by the EU parliament and the council of the EU for the creation of a geodata-infrastructure, also called the INSPIRE directive. Another example is the directive on the reuse of public sector information, or PSI directive.</p> <p>German law contains something called \"Gesetz \u00fcber den Zugang zu digitalen Geodaten\" (Geodatenzugangsgesetz, or GeoZG for short)\". GeoZG in \u00a7 11 introduces an obligation to allow the use of the country's geodata, however it doesn't itself allow use. Asking for attribution is not required by this law. If you're feeling particularly good about your skills in legal German language: \u201eGeodaten und Metadaten sind \u00fcber Geodatendienste f\u00fcr die kommerzielle und nicht kommerzielle Nutzung geldleistungsfrei zur Verf\u00fcgung zu stellen, soweit durch besondere Rechtsvorschrift nichts anderes bestimmt ist oder vertragliche oder gesetzliche Rechte Dritter dem nicht entgegenstehen.\u201c</p>"},{"location":"tutorials/99_other/video_oeo/","title":"Open Energy Ontology","text":"<p>This is an introductory talk on the OpenEnergyOntology given for the openmod community. Here's a link to the slides.</p>"},{"location":"tutorials/99_other/video_oeo/#video","title":"Video","text":"<p>https://www.youtube.com/embed/Cfz8Bdu0mic</p>"},{"location":"tutorials/99_other/wizard/","title":"Create and upload table from csv using the platform wizard","text":""},{"location":"tutorials/99_other/wizard/#prerequisites","title":"Prerequisites","text":"<p>We are using the following example csv <code>my_table.csv</code>, exported from Excel using semicolon as a delimiter and encoded in utf-8.</p> <pre><code>id;center_lon;center_lat;rs;name;date_valid;population;area_km2;has_dist;geometry_wkt\n1;9.446698;54.798648;01001;Flensburg;2008-01-01;89504;56.73;TRUE;POINT(9.446698 54.798648)\n2;10.141397;54.338963;01002;Kiel;2006-01-01;247548;118.65;TRUE;POINT(10.141397 54.338963)\n3;10.753957;53.873731;01003;L\u00fcbeck;2006-02-01;217198;214.19;TRUE;POINT(10.753957 53.873731)\n4;9.990176;54.076646;01004;Neum\u00fcnster;1970-04-26;79487;71.66;TRUE;POINT(9.990176 54.076646)\n5;9.105109;54.138105;01051;Dithmarschen;2011-08-01;133210;1428.18;TRUE;POINT(9.105109 54.138105)\n6;10.602975;53.617187;01053;Herzogtum Lauenburg;2009-01-01;197264;1263.07;TRUE;POINT(10.602975 53.617187)\n7;8.691597;54.647511;01054;Nordfriesland;2016-01-01;165507;2083.53;TRUE;POINT(8.691597 54.647511)\n8;10.860564;54.238161;01055;Ostholstein;2010-01-01;200581;1393;TRUE;POINT(10.860564 54.238161)\n9;9.531033;53.709420;01056;Pinneberg;2009-01-01;314391;664.27;TRUE;POINT(9.531033 53.709420)\n10;10.369426;54.251352;01057;Pl\u00f6n;2009-01-01;128647;1083.56;TRUE;POINT(10.369426 54.251352)\n</code></pre> <p>We are logged in on the open energy platform</p>"},{"location":"tutorials/99_other/wizard/#create-table-using-the-wizard","title":"Create table using the wizard","text":"<ul> <li>On the platform go to the database section.   </li> <li>Click on + data set in the <code>model_draft</code> section.</li> <li>Unfold the <code>Create Table</code> section of the wizard.</li> <li>Enter a valid table name (only lowercase, only characters, number and underscore).</li> <li>Add your data columns with the appropriate PostgreSQL data types</li> <li>Small popup windows give hints or explanations.</li> <li>The first column must always be a numerical type named <code>id</code>. The wizard has this as a default.</li> <li>We don't have to use all the columns from the csv file and we also don't have to use the same names, these can be mapped later. In this example, we use the following columns:   </li> <li>Beneath the columns of the table is the option to <code>Apply Embargo</code>. The default is set to <code>None</code> but in the drop down menu the options 6 Months and 1 Year are also given. Comment: Here a link to the course explaining embargo will be inserted.</li> <li>Next to all tabs is a small <code>i</code>. If you hover your mouse over it you will get information about the correponding field.</li> <li>Click on <code>Create table</code>.</li> <li>If successful, you are redirected to the upload section.</li> </ul>"},{"location":"tutorials/99_other/wizard/#upload-a-csv-file-using-the-wizard","title":"Upload a csv file using the wizard","text":"<ul> <li>On the platform go to the database section.</li> <li>Click on + data set in the <code>model_draft</code> section.</li> <li>Unfold the <code>Upload CSV</code> section of the wizard.</li> <li>Click on <code>Browse</code> and select your csv file from your local drive.</li> <li>You may specify the csv file encoding and delimiter character, or leave it blank for automatic detection (which may be wrong though). The <code>Header</code> checkbox is activated to indicate that the first line in the file contains column names.</li> <li>You can click on <code>Show example csv for current configuration</code> to see an example snippet of a valid csv file for your table.</li> <li>You can click on <code>Show preview</code> to see the first few lines of your file. This may help to detect encoding errors.</li> </ul> <ul> <li>Map the columns from your csv file to the columns in your database. Columns with the same name are automatically filled out for you.</li> <li>In our example, we ignore the columns <code>center_lon</code>, <code>center_lat</code> and <code>area_km2</code> and rename <code>rs</code> to <code>region_key</code>.</li> <li>While you change the column mappings, the preview below shows the application of the mapping for the first few rows.</li> </ul> <ul> <li>If everything checks out, click <code>Upload</code>.</li> </ul>"},{"location":"tutorials/99_other/wizard/#about-this-tutorial","title":"About this tutorial","text":"<p>Author: Christian Winger (\u00d6ko-Institut). License: CC BY 4.0. Last update: 2024-10-21</p>"}]}